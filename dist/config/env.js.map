{"version":3,"sources":["../../config/env.js"],"names":["fs","require","path","paths","cache","resolve","NODE_ENV","process","env","Error","dotenvFiles","dotenv","filter","Boolean","forEach","existsSync","dotenvFile","config","appDirectory","realpathSync","cwd","NODE_PATH","split","delimiter","folder","isAbsolute","map","join","REACT_APP","getClientEnvironment","publicUrl","raw","Object","keys","test","key","reduce","PUBLIC_URL","stringified","JSON","stringify","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,QAAQF,QAAQ,SAAR,CAAd;;AAEA;AACA,OAAOA,QAAQG,KAAR,CAAcH,QAAQI,OAAR,CAAgB,SAAhB,CAAd,CAAP;;AAEA,IAAMC,WAAWC,QAAQC,GAAR,CAAYF,QAA7B;AACA,IAAI,CAACA,QAAL,EAAe;AACb,QAAM,IAAIG,KAAJ,CACJ,sEADI,CAAN;AAGD;;AAED;AACA,IAAIC,cAAc,CACbP,MAAMQ,MADO,SACGL,QADH,aAEbH,MAAMQ,MAFO,SAEGL,QAFH;AAGhB;AACA;AACA;AACAA,aAAa,MAAb,IAA0BH,MAAMQ,MAAhC,WANgB,EAOhBR,MAAMQ,MAPU,EAQhBC,MARgB,CAQTC,OARS,CAAlB;;AAUA;AACA;AACA;AACA;AACAH,YAAYI,OAAZ,CAAoB,sBAAc;AAChC,MAAId,GAAGe,UAAH,CAAcC,UAAd,CAAJ,EAA+B;AAC7Bf,YAAQ,QAAR,EAAkBgB,MAAlB,CAAyB;AACvBf,YAAMc;AADiB,KAAzB;AAGD;AACF,CAND;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAME,eAAelB,GAAGmB,YAAH,CAAgBZ,QAAQa,GAAR,EAAhB,CAArB;AACAb,QAAQC,GAAR,CAAYa,SAAZ,GAAwB,CAACd,QAAQC,GAAR,CAAYa,SAAZ,IAAyB,EAA1B,EACrBC,KADqB,CACfpB,KAAKqB,SADU,EAErBX,MAFqB,CAEd;AAAA,SAAUY,UAAU,CAACtB,KAAKuB,UAAL,CAAgBD,MAAhB,CAArB;AAAA,CAFc,EAGrBE,GAHqB,CAGjB;AAAA,SAAUxB,KAAKG,OAAL,CAAaa,YAAb,EAA2BM,MAA3B,CAAV;AAAA,CAHiB,EAIrBG,IAJqB,CAIhBzB,KAAKqB,SAJW,CAAxB;;AAMA;AACA;AACA,IAAMK,YAAY,cAAlB;;AAEA,SAASC,oBAAT,CAA8BC,SAA9B,EAAyC;AACvC,MAAMC,MAAMC,OAAOC,IAAP,CAAY1B,QAAQC,GAApB,EACTI,MADS,CACF;AAAA,WAAOgB,UAAUM,IAAV,CAAeC,GAAf,CAAP;AAAA,GADE,EAETC,MAFS,CAGR,UAAC5B,GAAD,EAAM2B,GAAN,EAAc;AACZ3B,QAAI2B,GAAJ,IAAW5B,QAAQC,GAAR,CAAY2B,GAAZ,CAAX;AACA,WAAO3B,GAAP;AACD,GANO,EAOR;AACE;AACA;AACAF,cAAUC,QAAQC,GAAR,CAAYF,QAAZ,IAAwB,aAHpC;AAIE;AACA;AACA;AACA;AACA+B,gBAAYP;AARd,GAPQ,CAAZ;AAkBA;AACA,MAAMQ,cAAc;AAClB,mBAAeN,OAAOC,IAAP,CAAYF,GAAZ,EAAiBK,MAAjB,CAAwB,UAAC5B,GAAD,EAAM2B,GAAN,EAAc;AACnD3B,UAAI2B,GAAJ,IAAWI,KAAKC,SAAL,CAAeT,IAAII,GAAJ,CAAf,CAAX;AACA,aAAO3B,GAAP;AACD,KAHc,EAGZ,EAHY;AADG,GAApB;;AAOA,SAAO,EAAEuB,QAAF,EAAOO,wBAAP,EAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiBb,oBAAjB","file":"env.js","sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst paths = require('./paths');\n\n// Make sure that including paths.js after env.js will read .env variables.\ndelete require.cache[require.resolve('./paths')];\n\nconst NODE_ENV = process.env.NODE_ENV;\nif (!NODE_ENV) {\n  throw new Error(\n    'The NODE_ENV environment variable is required but was not specified.'\n  );\n}\n\n// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\nvar dotenvFiles = [\n  `${paths.dotenv}.${NODE_ENV}.local`,\n  `${paths.dotenv}.${NODE_ENV}`,\n  // Don't include `.env.local` for `test` environment\n  // since normally you expect tests to produce the same\n  // results for everyone\n  NODE_ENV !== 'test' && `${paths.dotenv}.local`,\n  paths.dotenv,\n].filter(Boolean);\n\n// Load environment variables from .env* files. Suppress warnings using silent\n// if this file is missing. dotenv will never modify any environment variables\n// that have already been set.\n// https://github.com/motdotla/dotenv\ndotenvFiles.forEach(dotenvFile => {\n  if (fs.existsSync(dotenvFile)) {\n    require('dotenv').config({\n      path: dotenvFile,\n    });\n  }\n});\n\n// We support resolving modules according to `NODE_PATH`.\n// This lets you use absolute paths in imports inside large monorepos:\n// https://github.com/facebookincubator/create-react-app/issues/253.\n// It works similar to `NODE_PATH` in Node itself:\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\n// https://github.com/facebookincubator/create-react-app/issues/1023#issuecomment-265344421\n// We also resolve them to make sure all tools using them work consistently.\nconst appDirectory = fs.realpathSync(process.cwd());\nprocess.env.NODE_PATH = (process.env.NODE_PATH || '')\n  .split(path.delimiter)\n  .filter(folder => folder && !path.isAbsolute(folder))\n  .map(folder => path.resolve(appDirectory, folder))\n  .join(path.delimiter);\n\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\n// injected into the application via DefinePlugin in Webpack configuration.\nconst REACT_APP = /^REACT_APP_/i;\n\nfunction getClientEnvironment(publicUrl) {\n  const raw = Object.keys(process.env)\n    .filter(key => REACT_APP.test(key))\n    .reduce(\n      (env, key) => {\n        env[key] = process.env[key];\n        return env;\n      },\n      {\n        // Useful for determining whether weâ€™re running in production mode.\n        // Most importantly, it switches React into the correct mode.\n        NODE_ENV: process.env.NODE_ENV || 'development',\n        // Useful for resolving the correct path to static assets in `public`.\n        // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\n        // This should only be used as an escape hatch. Normally you would put\n        // images into the `src` and `import` them in code to get their paths.\n        PUBLIC_URL: publicUrl,\n      }\n    );\n  // Stringify all values so we can feed into Webpack DefinePlugin\n  const stringified = {\n    'process.env': Object.keys(raw).reduce((env, key) => {\n      env[key] = JSON.stringify(raw[key]);\n      return env;\n    }, {}),\n  };\n\n  return { raw, stringified };\n}\n\nmodule.exports = getClientEnvironment;\n"]}