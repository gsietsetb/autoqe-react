{"version":3,"sources":["../../config/webpackDevServer.config.js"],"names":["errorOverlayMiddleware","require","noopServiceWorkerMiddleware","config","paths","protocol","process","env","HTTPS","host","HOST","module","exports","proxy","allowedHost","disableHostCheck","DANGEROUSLY_DISABLE_HOST_CHECK","compress","clientLogLevel","contentBase","appPublic","watchContentBase","hot","publicPath","output","quiet","watchOptions","ignored","https","overlay","historyApiFallback","disableDotRule","public","setup","app","use"],"mappings":"AAAA;;AAEA,IAAMA,yBAAyBC,QAAQ,gCAAR,CAA/B;AACA,IAAMC,8BAA8BD,QAAQ,6CAAR,CAApC;AACA,IAAME,SAASF,QAAQ,sBAAR,CAAf;AACA,IAAMG,QAAQH,QAAQ,SAAR,CAAd;;AAEA,IAAMI,WAAWC,QAAQC,GAAR,CAAYC,KAAZ,KAAsB,MAAtB,GAA+B,OAA/B,GAAyC,MAA1D;AACA,IAAMC,OAAOH,QAAQC,GAAR,CAAYG,IAAZ,IAAoB,SAAjC;;AAEAC,OAAOC,OAAP,GAAiB,UAASC,KAAT,EAAgBC,WAAhB,EAA6B;AAC5C,SAAO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,sBACE,CAACF,KAAD,IAAUP,QAAQC,GAAR,CAAYS,8BAAZ,KAA+C,MAlBtD;AAmBL;AACAC,cAAU,IApBL;AAqBL;AACA;AACAC,oBAAgB,MAvBX;AAwBL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,iBAAaf,MAAMgB,SAtCd;AAuCL;AACAC,sBAAkB,IAxCb;AAyCL;AACA;AACA;AACA;AACA;AACAC,SAAK,IA9CA;AA+CL;AACA;AACAC,gBAAYpB,OAAOqB,MAAP,CAAcD,UAjDrB;AAkDL;AACA;AACAE,WAAO,IApDF;AAqDL;AACA;AACAC,kBAAc;AACZC,eAAS;AADG,KAvDT;AA0DL;AACAC,WAAOvB,aAAa,OA3Df;AA4DLI,UAAMA,IA5DD;AA6DLoB,aAAS,KA7DJ;AA8DLC,wBAAoB;AAClB;AACA;AACAC,sBAAgB;AAHE,KA9Df;AAmELC,YAAQlB,WAnEH;AAoELD,gBApEK;AAqELoB,SArEK,iBAqECC,GArED,EAqEM;AACT;AACAA,UAAIC,GAAJ,CAAQnC,wBAAR;AACA;AACA;AACA;AACA;AACA;AACAkC,UAAIC,GAAJ,CAAQjC,6BAAR;AACD;AA9EI,GAAP;AAgFD,CAjFD","file":"webpackDevServer.config.js","sourcesContent":["'use strict';\n\nconst errorOverlayMiddleware = require('react-error-overlay/middleware');\nconst noopServiceWorkerMiddleware = require('react-dev-utils/noopServiceWorkerMiddleware');\nconst config = require('./webpack.config.dev');\nconst paths = require('./paths');\n\nconst protocol = process.env.HTTPS === 'true' ? 'https' : 'http';\nconst host = process.env.HOST || '0.0.0.0';\n\nmodule.exports = function(proxy, allowedHost) {\n  return {\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\n    // websites from potentially accessing local content through DNS rebinding:\n    // https://github.com/webpack/webpack-dev-server/issues/887\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\n    // However, it made several existing use cases such as development in cloud\n    // environment or subdomains in development significantly more complicated:\n    // https://github.com/facebookincubator/create-react-app/issues/2271\n    // https://github.com/facebookincubator/create-react-app/issues/2233\n    // While we're investigating better solutions, for now we will take a\n    // compromise. Since our WDS configuration only serves files in the `public`\n    // folder we won't consider accessing them a vulnerability. However, if you\n    // use the `proxy` feature, it gets more dangerous because it can expose\n    // remote code execution vulnerabilities in backends like Django and Rails.\n    // So we will disable the host check normally, but enable it if you have\n    // specified the `proxy` setting. Finally, we let you override it if you\n    // really know what you're doing with a special environment variable.\n    disableHostCheck:\n      !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true',\n    // Enable gzip compression of generated files.\n    compress: true,\n    // Silence WebpackDevServer's own logs since they're generally not useful.\n    // It will still show compile warnings and errors with this setting.\n    clientLogLevel: 'none',\n    // By default WebpackDevServer serves physical files from current directory\n    // in addition to all the virtual build products that it serves from memory.\n    // This is confusing because those files wonâ€™t automatically be available in\n    // production build folder unless we copy them. However, copying the whole\n    // project directory is dangerous because we may expose sensitive files.\n    // Instead, we establish a convention that only files in `public` directory\n    // get served. Our build script will copy `public` into the `build` folder.\n    // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\n    // Note that we only recommend to use `public` folder as an escape hatch\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\n    // for some reason broken when imported through Webpack. If you just want to\n    // use an image, put it in `src` and `import` it from JavaScript instead.\n    contentBase: paths.appPublic,\n    // By default files from `contentBase` will not trigger a page reload.\n    watchContentBase: true,\n    // Enable hot reloading server. It will provide /sockjs-node/ endpoint\n    // for the WebpackDevServer client so it can learn when the files were\n    // updated. The WebpackDevServer client is included as an entry point\n    // in the Webpack development configuration. Note that only changes\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\n    hot: true,\n    // It is important to tell WebpackDevServer to use the same \"root\" path\n    // as we specified in the config. In development, we always serve from /.\n    publicPath: config.output.publicPath,\n    // WebpackDevServer is noisy by default so we emit custom message instead\n    // by listening to the compiler events with `compiler.plugin` calls above.\n    quiet: true,\n    // Reportedly, this avoids CPU overload on some systems.\n    // https://github.com/facebookincubator/create-react-app/issues/293\n    watchOptions: {\n      ignored: /node_modules/,\n    },\n    // Enable HTTPS if the HTTPS environment variable is set to 'true'\n    https: protocol === 'https',\n    host: host,\n    overlay: false,\n    historyApiFallback: {\n      // Paths with dots should still use the history fallback.\n      // See https://github.com/facebookincubator/create-react-app/issues/387.\n      disableDotRule: true,\n    },\n    public: allowedHost,\n    proxy,\n    setup(app) {\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebookincubator/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware());\n    },\n  };\n};\n"]}