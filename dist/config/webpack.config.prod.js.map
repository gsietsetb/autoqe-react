{"version":3,"sources":["../../config/webpack.config.prod.js"],"names":["autoprefixer","require","path","webpack","HtmlWebpackPlugin","ExtractTextPlugin","ManifestPlugin","InterpolateHtmlPlugin","SWPrecacheWebpackPlugin","eslintFormatter","ModuleScopePlugin","paths","getClientEnvironment","publicPath","servedPath","shouldUseRelativeAssetPaths","publicUrl","slice","env","stringified","NODE_ENV","Error","cssFilename","extractTextPluginOptions","Array","split","length","join","module","exports","bail","devtool","entry","resolve","appIndexJs","output","appBuild","filename","chunkFilename","devtoolModuleFilenameTemplate","relative","appSrc","info","absoluteResourcePath","replace","modules","appNodeModules","concat","process","NODE_PATH","delimiter","filter","Boolean","extensions","alias","plugins","strictExportPresence","rules","test","enforce","use","options","formatter","loader","include","exclude","name","limit","compact","extract","Object","assign","fallback","importLoaders","minimize","sourceMap","ident","browsers","flexbox","raw","inject","template","appHtml","minify","removeComments","collapseWhitespace","removeRedundantAttributes","useShortDoctype","removeEmptyAttributes","removeStyleLinkTypeAttributes","keepClosingSlash","minifyJS","minifyCSS","minifyURLs","DefinePlugin","optimize","UglifyJsPlugin","compress","warnings","comparisons","comments","ascii_only","fileName","dontCacheBustUrlsMatching","logger","message","indexOf","console","log","navigateFallback","navigateFallbackWhitelist","staticFileGlobsIgnorePatterns","IgnorePlugin","node","dgram","fs","net","tls"],"mappings":"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","file":"webpack.config.prod.js","sourcesContent":["'use strict';\n\nconst autoprefixer = require('autoprefixer');\nconst path = require('path');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst ManifestPlugin = require('webpack-manifest-plugin');\nconst InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin');\nconst SWPrecacheWebpackPlugin = require('sw-precache-webpack-plugin');\nconst eslintFormatter = require('react-dev-utils/eslintFormatter');\nconst ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');\nconst paths = require('./paths');\nconst getClientEnvironment = require('./env');\n\n// Webpack uses `publicPath` to determine where the app is being served from.\n// It requires a trailing slash, or the file assets will get an incorrect path.\nconst publicPath = paths.servedPath;\n// Some apps do not use client-side routing with pushState.\n// For these, \"homepage\" can be set to \".\" to enable relative asset paths.\nconst shouldUseRelativeAssetPaths = publicPath === './';\n// `publicUrl` is just like `publicPath`, but we will provide it to our app\n// as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\n// Omit trailing slash as %PUBLIC_URL%/xyz looks better than %PUBLIC_URL%xyz.\nconst publicUrl = publicPath.slice(0, -1);\n// Get environment variables to inject into our app.\nconst env = getClientEnvironment(publicUrl);\n\n// Assert this just to be safe.\n// Development builds of React are slow and not intended for production.\nif (env.stringified['process.env'].NODE_ENV !== '\"production\"') {\n  throw new Error('Production builds must have NODE_ENV=production.');\n}\n\n// Note: defined here because it will be used more than once.\nconst cssFilename = 'static/css/[name].[contenthash:8].css';\n\n// ExtractTextPlugin expects the build output to be flat.\n// (See https://github.com/webpack-contrib/extract-text-webpack-plugin/issues/27)\n// However, our output is structured with css, js and media folders.\n// To have this structure working with relative paths, we have to use custom options.\nconst extractTextPluginOptions = shouldUseRelativeAssetPaths\n  ? // Making sure that the publicPath goes back to to build folder.\n    { publicPath: Array(cssFilename.split('/').length).join('../') }\n  : {};\n\n// This is the production configuration.\n// It compiles slowly and is focused on producing a fast and minimal bundle.\n// The development configuration is different and lives in a separate file.\nmodule.exports = {\n  // Don't attempt to continue if there are any errors.\n  bail: true,\n  // We generate sourcemaps in production. This is slow but gives good results.\n  // You can exclude the *.map files from the build during deployment.\n  devtool: 'source-map',\n  // In production, we only want to load the polyfills and the app code.\n  entry: [require.resolve('./polyfills'), paths.appIndexJs],\n  output: {\n    // The build folder.\n    path: paths.appBuild,\n    // Generated JS file names (with nested folders).\n    // There will be one main bundle, and one file per asynchronous chunk.\n    // We don't currently advertise code splitting but Webpack supports it.\n    filename: 'static/js/[name].[chunkhash:8].js',\n    chunkFilename: 'static/js/[name].[chunkhash:8].chunk.js',\n    // We inferred the \"public path\" (such as / or /my-project) from homepage.\n    publicPath: publicPath,\n    // Point sourcemap entries to original disk location (format as URL on Windows)\n    devtoolModuleFilenameTemplate: info =>\n      path\n        .relative(paths.appSrc, info.absoluteResourcePath)\n        .replace(/\\\\/g, '/'),\n  },\n  resolve: {\n    // This allows you to set a fallback for where Webpack should look for modules.\n    // We placed these paths second because we want `node_modules` to \"win\"\n    // if there are any conflicts. This matches Node resolution mechanism.\n    // https://github.com/facebookincubator/create-react-app/issues/253\n    modules: ['node_modules', paths.appNodeModules].concat(\n      // It is guaranteed to exist because we tweak it in `env.js`\n      process.env.NODE_PATH.split(path.delimiter).filter(Boolean)\n    ),\n    // These are the reasonable defaults supported by the Node ecosystem.\n    // We also include JSX as a common component filename extension to support\n    // some tools, although we do not recommend using it, see:\n    // https://github.com/facebookincubator/create-react-app/issues/290\n    // `web` extension prefixes have been added for better support\n    // for React Native Web.\n    extensions: ['.web.js', '.js', '.json', '.web.jsx', '.jsx'],\n    alias: {\n      \n      // Support React Native Web\n      // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\n      'react-native': 'react-native-web',\n    },\n    plugins: [\n      // Prevents users from importing files from outside of src/ (or node_modules/).\n      // This often causes confusion because we only process files within src/ with babel.\n      // To fix this, we prevent you from importing files out of src/ -- if you'd like to,\n      // please link the files into your node_modules/ and let module-resolution kick in.\n      // Make sure your source files are compiled, as they will not be processed in any way.\n      new ModuleScopePlugin(paths.appSrc),\n    ],\n  },\n  module: {\n    strictExportPresence: true,\n    rules: [\n      // TODO: Disable require.ensure as it's not a standard language feature.\n      // We are waiting for https://github.com/facebookincubator/create-react-app/issues/2176.\n      // { parser: { requireEnsure: false } },\n\n      // First, run the linter.\n      // It's important to do this before Babel processes the JS.\n      {\n        test: /\\.(js|jsx)$/,\n        enforce: 'pre',\n        use: [\n          {\n            options: {\n              formatter: eslintFormatter,\n              \n            },\n            loader: require.resolve('eslint-loader'),\n          },\n        ],\n        include: paths.appSrc,\n      },\n      // ** ADDING/UPDATING LOADERS **\n      // The \"file\" loader handles all assets unless explicitly excluded.\n      // The `exclude` list *must* be updated with every change to loader extensions.\n      // When adding a new loader, you must add its `test`\n      // as a new entry in the `exclude` list in the \"file\" loader.\n\n      // \"file\" loader makes sure those assets end up in the `build` folder.\n      // When you `import` an asset, you get its filename.\n      {\n        exclude: [\n          /\\.html$/,\n          /\\.(js|jsx)$/,\n          /\\.css$/,\n          /\\.json$/,\n          /\\.bmp$/,\n          /\\.gif$/,\n          /\\.jpe?g$/,\n          /\\.png$/,\n        ],\n        loader: require.resolve('file-loader'),\n        options: {\n          name: 'static/media/[name].[hash:8].[ext]',\n        },\n      },\n      // \"url\" loader works just like \"file\" loader but it also embeds\n      // assets smaller than specified size as data URLs to avoid requests.\n      {\n        test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\n        loader: require.resolve('url-loader'),\n        options: {\n          limit: 10000,\n          name: 'static/media/[name].[hash:8].[ext]',\n        },\n      },\n      // Process JS with Babel.\n      {\n        test: /\\.(js|jsx)$/,\n        include: paths.appSrc,\n        loader: require.resolve('babel-loader'),\n        options: {\n          \n          compact: true,\n        },\n      },\n      // The notation here is somewhat confusing.\n      // \"postcss\" loader applies autoprefixer to our CSS.\n      // \"css\" loader resolves paths in CSS and adds assets as dependencies.\n      // \"style\" loader normally turns CSS into JS modules injecting <style>,\n      // but unlike in development configuration, we do something different.\n      // `ExtractTextPlugin` first applies the \"postcss\" and \"css\" loaders\n      // (second argument), then grabs the result CSS and puts it into a\n      // separate file in our build process. This way we actually ship\n      // a single CSS file in production instead of JS code injecting <style>\n      // tags. If you use code splitting, however, any async bundles will still\n      // use the \"style\" loader inside the async code so CSS from them won't be\n      // in the main CSS file.\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          Object.assign(\n            {\n              fallback: require.resolve('style-loader'),\n              use: [\n                {\n                  loader: require.resolve('css-loader'),\n                  options: {\n                    importLoaders: 1,\n                    minimize: true,\n                    sourceMap: true,\n                  },\n                },\n                {\n                  loader: require.resolve('postcss-loader'),\n                  options: {\n                    // Necessary for external CSS imports to work\n                    // https://github.com/facebookincubator/create-react-app/issues/2677\n                    ident: 'postcss',\n                    plugins: () => [\n                      require('postcss-flexbugs-fixes'),\n                      autoprefixer({\n                        browsers: [\n                          '>1%',\n                          'last 4 versions',\n                          'Firefox ESR',\n                          'not ie < 9', // React doesn't support IE8 anyway\n                        ],\n                        flexbox: 'no-2009',\n                      }),\n                    ],\n                  },\n                },\n              ],\n            },\n            extractTextPluginOptions\n          )\n        ),\n        // Note: this won't work without `new ExtractTextPlugin()` in `plugins`.\n      },\n      // ** STOP ** Are you adding a new loader?\n      // Remember to add the new extension(s) to the \"file\" loader exclusion list.\n    ],\n  },\n  plugins: [\n    // Makes some environment variables available in index.html.\n    // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n    // In production, it will be an empty string unless you specify \"homepage\"\n    // in `package.json`, in which case it will be the pathname of that URL.\n    new InterpolateHtmlPlugin(env.raw),\n    // Generates an `index.html` file with the <script> injected.\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeRedundantAttributes: true,\n        useShortDoctype: true,\n        removeEmptyAttributes: true,\n        removeStyleLinkTypeAttributes: true,\n        keepClosingSlash: true,\n        minifyJS: true,\n        minifyCSS: true,\n        minifyURLs: true,\n      },\n    }),\n    // Makes some environment variables available to the JS code, for example:\n    // if (process.env.NODE_ENV === 'production') { ... }. See `./env.js`.\n    // It is absolutely essential that NODE_ENV was set to production here.\n    // Otherwise React will be compiled in the very slow development mode.\n    new webpack.DefinePlugin(env.stringified),\n    // Minify the code.\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false,\n        // Disabled because of an issue with Uglify breaking seemingly valid code:\n        // https://github.com/facebookincubator/create-react-app/issues/2376\n        // Pending further investigation:\n        // https://github.com/mishoo/UglifyJS2/issues/2011\n        comparisons: false,\n      },\n      output: {\n        comments: false,\n        // Turned on because emoji and regex is not minified properly using default\n        // https://github.com/facebookincubator/create-react-app/issues/2488\n        ascii_only: true,\n      },\n      sourceMap: true,\n    }),\n    // Note: this won't work without ExtractTextPlugin.extract(..) in `loaders`.\n    new ExtractTextPlugin({\n      filename: cssFilename,\n    }),\n    // Generate a manifest file which contains a mapping of all asset filenames\n    // to their corresponding output file so that tools can pick it up without\n    // having to parse `index.html`.\n    new ManifestPlugin({\n      fileName: 'asset-manifest.json',\n    }),\n    // Generate a service worker script that will precache, and keep up to date,\n    // the HTML & assets that are part of the Webpack build.\n    new SWPrecacheWebpackPlugin({\n      // By default, a cache-busting query parameter is appended to requests\n      // used to populate the caches, to ensure the responses are fresh.\n      // If a URL is already hashed by Webpack, then there is no concern\n      // about it being stale, and the cache-busting can be skipped.\n      dontCacheBustUrlsMatching: /\\.\\w{8}\\./,\n      filename: 'service-worker.js',\n      logger(message) {\n        if (message.indexOf('Total precache size is') === 0) {\n          // This message occurs for every build and is a bit too noisy.\n          return;\n        }\n        if (message.indexOf('Skipping static resource') === 0) {\n          // This message obscures real errors so we ignore it.\n          // https://github.com/facebookincubator/create-react-app/issues/2612\n          return;\n        }\n        console.log(message);\n      },\n      minify: true,\n      // For unknown URLs, fallback to the index page\n      navigateFallback: publicUrl + '/index.html',\n      // Ignores URLs starting from /__ (useful for Firebase):\n      // https://github.com/facebookincubator/create-react-app/issues/2237#issuecomment-302693219\n      navigateFallbackWhitelist: [/^(?!\\/__).*/],\n      // Don't precache sourcemaps (they're large) and build asset manifest:\n      staticFileGlobsIgnorePatterns: [/\\.map$/, /asset-manifest\\.json$/],\n    }),\n    // Moment.js is an extremely popular library that bundles large locale files\n    // by default due to how Webpack interprets its code. This is a practical\n    // solution that requires the user to opt into importing specific locales.\n    // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\n    // You can remove this if you don't use Moment.js:\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/),\n  ],\n  // Some libraries import Node modules but don't use them in the browser.\n  // Tell Webpack to provide empty mocks for them so importing them works.\n  node: {\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n  },\n};\n"]}