{"version":3,"sources":["../../scripts/build.js"],"names":["process","env","BABEL_ENV","NODE_ENV","on","err","require","path","chalk","fs","webpack","config","paths","checkRequiredFiles","formatWebpackMessages","printHostingInstructions","FileSizeReporter","measureFileSizesBeforeBuild","printFileSizesAfterBuild","useYarn","existsSync","yarnLockFile","WARN_AFTER_BUNDLE_GZIP_SIZE","WARN_AFTER_CHUNK_GZIP_SIZE","appHtml","appIndexJs","exit","appBuild","then","emptyDirSync","copyPublicFolder","build","previousFileSizes","stats","warnings","length","console","log","yellow","join","underline","cyan","green","appPackage","appPackageJson","publicUrl","publicPath","output","buildFolder","relative","cwd","red","message","compiler","Promise","resolve","reject","run","messages","toJson","errors","Error","CI","toLowerCase","copySync","appPublic","dereference","filter","file"],"mappings":"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","file":"build.js","sourcesContent":["'use strict';\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'production';\nprocess.env.NODE_ENV = 'production';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n\nconst path = require('path');\nconst chalk = require('chalk');\nconst fs = require('fs-extra');\nconst webpack = require('webpack');\nconst config = require('../config/webpack.config.prod');\nconst paths = require('../config/paths');\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nconst formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');\nconst printHostingInstructions = require('react-dev-utils/printHostingInstructions');\nconst FileSizeReporter = require('react-dev-utils/FileSizeReporter');\n\nconst measureFileSizesBeforeBuild =\n  FileSizeReporter.measureFileSizesBeforeBuild;\nconst printFileSizesAfterBuild = FileSizeReporter.printFileSizesAfterBuild;\nconst useYarn = fs.existsSync(paths.yarnLockFile);\n\n// These sizes are pretty large. We'll warn for bundles exceeding them.\nconst WARN_AFTER_BUNDLE_GZIP_SIZE = 512 * 1024;\nconst WARN_AFTER_CHUNK_GZIP_SIZE = 1024 * 1024;\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\n// First, read the current file sizes in build directory.\n// This lets us display how much they changed later.\nmeasureFileSizesBeforeBuild(paths.appBuild)\n  .then(previousFileSizes => {\n    // Remove all content but keep the directory so that\n    // if you're in it, you don't end up in Trash\n    fs.emptyDirSync(paths.appBuild);\n    // Merge with the public folder\n    copyPublicFolder();\n    // Start the webpack build\n    return build(previousFileSizes);\n  })\n  .then(\n    ({ stats, previousFileSizes, warnings }) => {\n      if (warnings.length) {\n        console.log(chalk.yellow('Compiled with warnings.\\n'));\n        console.log(warnings.join('\\n\\n'));\n        console.log(\n          '\\nSearch for the ' +\n            chalk.underline(chalk.yellow('keywords')) +\n            ' to learn more about each warning.'\n        );\n        console.log(\n          'To ignore, add ' +\n            chalk.cyan('// eslint-disable-next-line') +\n            ' to the line before.\\n'\n        );\n      } else {\n        console.log(chalk.green('Compiled successfully.\\n'));\n      }\n\n      console.log('File sizes after gzip:\\n');\n      printFileSizesAfterBuild(\n        stats,\n        previousFileSizes,\n        paths.appBuild,\n        WARN_AFTER_BUNDLE_GZIP_SIZE,\n        WARN_AFTER_CHUNK_GZIP_SIZE\n      );\n      console.log();\n\n      const appPackage = require(paths.appPackageJson);\n      const publicUrl = paths.publicUrl;\n      const publicPath = config.output.publicPath;\n      const buildFolder = path.relative(process.cwd(), paths.appBuild);\n      printHostingInstructions(\n        appPackage,\n        publicUrl,\n        publicPath,\n        buildFolder,\n        useYarn\n      );\n    },\n    err => {\n      console.log(chalk.red('Failed to compile.\\n'));\n      console.log((err.message || err) + '\\n');\n      process.exit(1);\n    }\n  );\n\n// Create the production build and print the deployment instructions.\nfunction build(previousFileSizes) {\n  console.log('Creating an optimized production build...');\n\n  let compiler = webpack(config);\n  return new Promise((resolve, reject) => {\n    compiler.run((err, stats) => {\n      if (err) {\n        return reject(err);\n      }\n      const messages = formatWebpackMessages(stats.toJson({}, true));\n      if (messages.errors.length) {\n        return reject(new Error(messages.errors.join('\\n\\n')));\n      }\n      if (\n        process.env.CI &&\n        (typeof process.env.CI !== 'string' ||\n          process.env.CI.toLowerCase() !== 'false') &&\n        messages.warnings.length\n      ) {\n        console.log(\n          chalk.yellow(\n            '\\nTreating warnings as errors because process.env.CI = true.\\n' +\n              'Most CI servers set it automatically.\\n'\n          )\n        );\n        return reject(new Error(messages.warnings.join('\\n\\n')));\n      }\n      return resolve({\n        stats,\n        previousFileSizes,\n        warnings: messages.warnings,\n      });\n    });\n  });\n}\n\nfunction copyPublicFolder() {\n  fs.copySync(paths.appPublic, paths.appBuild, {\n    dereference: true,\n    filter: file => file !== paths.appHtml,\n  });\n}\n"]}