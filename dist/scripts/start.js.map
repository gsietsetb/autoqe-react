{"version":3,"sources":["../../scripts/start.js"],"names":["process","env","BABEL_ENV","NODE_ENV","on","err","require","fs","chalk","webpack","WebpackDevServer","clearConsole","checkRequiredFiles","choosePort","createCompiler","prepareProxy","prepareUrls","openBrowser","paths","config","createDevServerConfig","useYarn","existsSync","yarnLockFile","isInteractive","stdout","isTTY","appHtml","appIndexJs","exit","DEFAULT_PORT","parseInt","PORT","HOST","then","port","protocol","HTTPS","appName","appPackageJson","name","urls","compiler","proxySetting","proxy","proxyConfig","appPublic","serverConfig","lanUrlForConfig","devServer","listen","console","log","cyan","localUrlForBrowser","forEach","sig","close","catch","message"],"mappings":"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","file":"start.js","sourcesContent":["'use strict';\n\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'development';\nprocess.env.NODE_ENV = 'development';\n\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n\n// Ensure environment variables are read.\nrequire('../config/env');\n\nconst fs = require('fs');\nconst chalk = require('chalk');\nconst webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst clearConsole = require('react-dev-utils/clearConsole');\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nconst {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls,\n} = require('react-dev-utils/WebpackDevServerUtils');\nconst openBrowser = require('react-dev-utils/openBrowser');\nconst paths = require('../config/paths');\nconst config = require('../config/webpack.config.dev');\nconst createDevServerConfig = require('../config/webpackDevServer.config');\n\nconst useYarn = fs.existsSync(paths.yarnLockFile);\nconst isInteractive = process.stdout.isTTY;\n\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n\n// Tools like Cloud9 rely on this.\nconst DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;\nconst HOST = process.env.HOST || '0.0.0.0';\n\n// We attempt to use the default port but if it is busy, we offer the user to\n// run on a different port. `detect()` Promise resolves to the next free port.\nchoosePort(HOST, DEFAULT_PORT)\n  .then(port => {\n    if (port == null) {\n      // We have not found a port.\n      return;\n    }\n    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';\n    const appName = require(paths.appPackageJson).name;\n    const urls = prepareUrls(protocol, HOST, port);\n    // Create a webpack compiler that is configured with custom messages.\n    const compiler = createCompiler(webpack, config, appName, urls, useYarn);\n    // Load proxy config\n    const proxySetting = require(paths.appPackageJson).proxy;\n    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);\n    // Serve webpack assets generated by the compiler over a web sever.\n    const serverConfig = createDevServerConfig(\n      proxyConfig,\n      urls.lanUrlForConfig\n    );\n    const devServer = new WebpackDevServer(compiler, serverConfig);\n    // Launch WebpackDevServer.\n    devServer.listen(port, HOST, err => {\n      if (err) {\n        return console.log(err);\n      }\n      if (isInteractive) {\n        clearConsole();\n      }\n      console.log(chalk.cyan('Starting the development server...\\n'));\n      openBrowser(urls.localUrlForBrowser);\n    });\n\n    ['SIGINT', 'SIGTERM'].forEach(function(sig) {\n      process.on(sig, function() {\n        devServer.close();\n        process.exit();\n      });\n    });\n  })\n  .catch(err => {\n    if (err && err.message) {\n      console.log(err.message);\n    }\n    process.exit(1);\n  });\n"]}