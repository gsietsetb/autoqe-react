{
  "version": 3,
  "sources": [
    "../../../src/store/TripStore.js"
  ],
  "names": [
    "CHANGE_EVENT",
    "_trips",
    "_trip",
    "setTrips",
    "trips",
    "setTrip",
    "trip",
    "TripStoreClass",
    "emit",
    "callback",
    "on",
    "removeListener",
    "TripStore",
    "dispatchToken",
    "register",
    "action",
    "actionType",
    "RECIEVE_TRIPS",
    "emitChange",
    "RECIEVE_TRIP",
    "RECIEVE_TRIP_ERROR",
    "alert",
    "message",
    "RECIEVE_TRIPS_ERROR"
  ],
  "mappings": ";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,eAAe,QAArB;;AAEA,IAAIC,SAAS,EAAb;AACA,IAAIC,QAAQ,EAAZ;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvBH,WAASG,KAAT;AACD;;AAED,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrBJ,UAAQI,IAAR;AACD;;IAEKC,c;;;;;;;;;;;iCAES;AACX,WAAKC,IAAL,CAAUR,YAAV;AACD;;;sCAEiBS,Q,EAAU;AAC1B,WAAKC,EAAL,CAAQV,YAAR,EAAsBS,QAAtB;AACD;;;yCAEoBA,Q,EAAU;AAC7B,WAAKE,cAAL,CAAoBX,YAApB,EAAkCS,QAAlC;AACD;;;+BAEU;AACT,aAAOR,MAAP;AACD;;;8BAES;AACR,aAAOC,KAAP;AACD;;;;;;AAIH,IAAMU,YAAY,IAAIL,cAAJ,EAAlB;;AAEA;AACA;AACA;AACAK,UAAUC,aAAV,GAA0B,wBAAcC,QAAd,CAAuB,kBAAU;;AAEzD,UAAOC,OAAOC,UAAd;AACE,SAAK,wBAAcC,aAAnB;AACEd,eAASY,OAAOX,KAAhB;AACA;AACA;AACAQ,gBAAUM,UAAV;AACA;;AAEF,SAAK,wBAAcC,YAAnB;AACEd,cAAQU,OAAOT,IAAf;AACAM,gBAAUM,UAAV;AACA;;AAEF,SAAK,wBAAcE,kBAAnB;AACEC,YAAMN,OAAOO,OAAb;AACAV,gBAAUM,UAAV;AACA;;AAEF,SAAK,wBAAcK,mBAAnB;AACEF,YAAMN,OAAOO,OAAb;AACAV,gBAAUM,UAAV;AACA;;AAEF;AAvBF;AA0BD,CA5ByB,CAA1B;;kBA8BeN,S",
  "file": "TripStore.js",
  "sourcesContent": [
    "import AppDispatcher from '../dispatcher/AppDispatcher';\nimport TripConstants from '../constants/TripConstants';\nimport {EventEmitter} from 'events';\n\nconst CHANGE_EVENT = 'change';\n\nlet _trips = [];\nlet _trip = {};\n\nfunction setTrips(trips) {\n  _trips = trips;\n}\n\nfunction setTrip(trip) {\n  _trip = trip;\n}\n\nclass TripStoreClass extends EventEmitter {\n  \n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback)\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback)\n  }\n\n  getTrips() {\n    return _trips;\n  }\n  \n  getTrip() {\n    return _trip;\n  }\n  \n}\n\nconst TripStore = new TripStoreClass();\n\n// Here we register a callback for the dispatcher\n// and look for our various action types so we can\n// respond appropriately\nTripStore.dispatchToken = AppDispatcher.register(action => {\n\n  switch(action.actionType) {\n    case TripConstants.RECIEVE_TRIPS:\n      setTrips(action.trips);\n      // We need to call emitChange so the event listener\n      // knows that a change has been made\n      TripStore.emitChange();\n      break;\n      \n    case TripConstants.RECIEVE_TRIP:\n      setTrip(action.trip);\n      TripStore.emitChange();\n      break;\n      \n    case TripConstants.RECIEVE_TRIP_ERROR:\n      alert(action.message);\n      TripStore.emitChange();\n      break;\n      \n    case TripConstants.RECIEVE_TRIPS_ERROR:\n      alert(action.message);\n      TripStore.emitChange();\n      break;\n\n    default:\n  }\n  \n});\n\nexport default TripStore;"
  ]
}