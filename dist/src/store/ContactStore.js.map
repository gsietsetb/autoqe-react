{
  "version": 3,
  "sources": [
    "../../../src/store/ContactStore.js"
  ],
  "names": [
    "CHANGE_EVENT",
    "_contacts",
    "_contact",
    "setContacts",
    "contacts",
    "setContact",
    "contact",
    "ContactStoreClass",
    "emit",
    "callback",
    "on",
    "removeListener",
    "ContactStore",
    "dispatchToken",
    "register",
    "action",
    "actionType",
    "RECIEVE_USERS",
    "emitChange",
    "RECIEVE_USER",
    "RECIEVE_USER_ERROR",
    "alert",
    "message",
    "RECIEVE_USERS_ERROR"
  ],
  "mappings": ";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,eAAe,QAArB;;AAEA,IAAIC,YAAY,EAAhB;AACA,IAAIC,WAAW,EAAf;;AAEA,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7BH,cAAYG,QAAZ;AACD;;AAED,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3BJ,aAAWI,OAAX;AACD;;IAEKC,iB;;;;;;;;;;;iCAES;AACX,WAAKC,IAAL,CAAUR,YAAV;AACD;;;sCAEiBS,Q,EAAU;AAC1B,WAAKC,EAAL,CAAQV,YAAR,EAAsBS,QAAtB;AACD;;;yCAEoBA,Q,EAAU;AAC7B,WAAKE,cAAL,CAAoBX,YAApB,EAAkCS,QAAlC;AACD;;;kCAEa;AACZ,aAAOR,SAAP;AACD;;;iCAEY;AACX,aAAOC,QAAP;AACD;;;;;;AAIH,IAAMU,eAAe,IAAIL,iBAAJ,EAArB;;AAEA;AACA;AACA;AACAK,aAAaC,aAAb,GAA6B,wBAAcC,QAAd,CAAuB,kBAAU;;AAE5D,UAAOC,OAAOC,UAAd;AACE,SAAK,wBAAiBC,aAAtB;AACEd,kBAAYY,OAAOX,QAAnB;AACA;AACA;AACAQ,mBAAaM,UAAb;AACA;;AAEF,SAAK,wBAAiBC,YAAtB;AACEd,iBAAWU,OAAOT,OAAlB;AACAM,mBAAaM,UAAb;AACA;;AAEF,SAAK,wBAAiBE,kBAAtB;AACEC,YAAMN,OAAOO,OAAb;AACAV,mBAAaM,UAAb;AACA;;AAEF,SAAK,wBAAiBK,mBAAtB;AACEF,YAAMN,OAAOO,OAAb;AACAV,mBAAaM,UAAb;AACA;;AAEF;AAvBF;AA0BD,CA5B4B,CAA7B;;kBA8BeN,Y",
  "file": "ContactStore.js",
  "sourcesContent": [
    "import AppDispatcher from '../dispatcher/AppDispatcher';\nimport ContactConstants from '../constants/UserConstants';\nimport {EventEmitter} from 'events';\n\nconst CHANGE_EVENT = 'change';\n\nlet _contacts = [];\nlet _contact = {};\n\nfunction setContacts(contacts) {\n  _contacts = contacts;\n}\n\nfunction setContact(contact) {\n  _contact = contact;\n}\n\nclass ContactStoreClass extends EventEmitter {\n  \n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback)\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback)\n  }\n\n  getContacts() {\n    return _contacts;\n  }\n  \n  getContact() {\n    return _contact;\n  }\n  \n}\n\nconst ContactStore = new ContactStoreClass();\n\n// Here we register a callback for the dispatcher\n// and look for our various action types so we can\n// respond appropriately\nContactStore.dispatchToken = AppDispatcher.register(action => {\n\n  switch(action.actionType) {\n    case ContactConstants.RECIEVE_USERS:\n      setContacts(action.contacts);\n      // We need to call emitChange so the event listener\n      // knows that a change has been made\n      ContactStore.emitChange();\n      break;\n      \n    case ContactConstants.RECIEVE_USER:\n      setContact(action.contact);\n      ContactStore.emitChange();\n      break;\n      \n    case ContactConstants.RECIEVE_USER_ERROR:\n      alert(action.message);\n      ContactStore.emitChange();\n      break;\n      \n    case ContactConstants.RECIEVE_USERS_ERROR:\n      alert(action.message);\n      ContactStore.emitChange();\n      break;\n\n    default:\n  }\n  \n});\n\nexport default ContactStore;"
  ]
}