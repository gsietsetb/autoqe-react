{"version":3,"sources":["../../../src/store/AuthStore.js"],"names":["CHANGE_EVENT","setUser","profile","token","localStorage","getItem","setItem","JSON","stringify","removeUser","removeItem","AuthStoreClass","emit","callback","on","removeListener","AuthStore","dispatchToken","register","action","actionType","LOGIN_USER","emitChange","LOGOUT_USER"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,eAAe,QAArB;;AAEA,SAASC,OAAT,CAAiBC,OAAjB,EAA0BC,KAA1B,EAAiC;AAC/B,MAAI,CAACC,aAAaC,OAAb,CAAqB,UAArB,CAAL,EAAuC;AACrCD,iBAAaE,OAAb,CAAqB,SAArB,EAAgCC,KAAKC,SAAL,CAAeN,OAAf,CAAhC;AACAE,iBAAaE,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACD;AACF;;AAED,SAASM,UAAT,GAAsB;AACpBL,eAAaM,UAAb,CAAwB,SAAxB;AACAN,eAAaM,UAAb,CAAwB,UAAxB;AACD;;IAEKC,c;;;;;;;;;;;iCACS;AACX,WAAKC,IAAL,CAAUZ,YAAV;AACD;;;sCAEiBa,Q,EAAU;AAC1B,WAAKC,EAAL,CAAQd,YAAR,EAAsBa,QAAtB;AACD;;;yCAEoBA,Q,EAAU;AAC7B,WAAKE,cAAL,CAAoBf,YAApB,EAAkCa,QAAlC;AACD;;;sCAEiB;AAChB,UAAIT,aAAaC,OAAb,CAAqB,UAArB,CAAJ,EAAsC;AACpC,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;8BAES;AACR,aAAOD,aAAaC,OAAb,CAAqB,SAArB,CAAP;AACD;;;6BAEQ;AACP,aAAOD,aAAaC,OAAb,CAAqB,UAArB,CAAP;AACD;;;;;;AAGH,IAAMW,YAAY,IAAIL,cAAJ,EAAlB;;AAEA;AACA;AACA;AACAK,UAAUC,aAAV,GAA0B,wBAAcC,QAAd,CAAuB,kBAAU;;AAEzD,UAAOC,OAAOC,UAAd;;AAEE,SAAK,wBAAcC,UAAnB;AACEpB,cAAQkB,OAAOjB,OAAf,EAAwBiB,OAAOhB,KAA/B;AACAa,gBAAUM,UAAV;AACA;;AAEF,SAAK,wBAAcC,WAAnB;AACEd;AACAO,gBAAUM,UAAV;AACA;;AAEF;AAZF;AAgBD,CAlByB,CAA1B;;kBAoBeN,S","file":"AuthStore.js","sourcesContent":["import AppDispatcher from '../dispatcher/AppDispatcher';\nimport AuthConstants from '../constants/AuthConstants';\nimport {EventEmitter} from 'events';\n\nconst CHANGE_EVENT = 'change';\n\nfunction setUser(profile, token) {\n  if (!localStorage.getItem('id_token')) {\n    localStorage.setItem('profile', JSON.stringify(profile));\n    localStorage.setItem('id_token', token);\n  }\n}\n\nfunction removeUser() {\n  localStorage.removeItem('profile');\n  localStorage.removeItem('id_token');\n}\n\nclass AuthStoreClass extends EventEmitter {\n  emitChange() {\n    this.emit(CHANGE_EVENT);\n  }\n\n  addChangeListener(callback) {\n    this.on(CHANGE_EVENT, callback)\n  }\n\n  removeChangeListener(callback) {\n    this.removeListener(CHANGE_EVENT, callback)\n  }\n  \n  isAuthenticated() {\n    if (localStorage.getItem('id_token')) {\n      return true;\n    }\n    return false;\n  }\n  \n  getUser() {\n    return localStorage.getItem('profile');\n  }\n  \n  getJwt() {\n    return localStorage.getItem('id_token');\n  }\n}\n\nconst AuthStore = new AuthStoreClass();\n\n// Here we register a callback for the dispatcher\n// and look for our various action types so we can\n// respond appropriately\nAuthStore.dispatchToken = AppDispatcher.register(action => {\n\n  switch(action.actionType) {\n      \n    case AuthConstants.LOGIN_USER:\n      setUser(action.profile, action.token);\n      AuthStore.emitChange();\n      break;\n      \n    case AuthConstants.LOGOUT_USER:\n      removeUser();\n      AuthStore.emitChange();\n      break;\n\n    default:\n  }\n\n  \n});\n\nexport default AuthStore;"]}