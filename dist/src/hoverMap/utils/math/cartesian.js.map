{"version":3,"sources":["../../../../../src/hoverMap/utils/math/cartesian.js"],"names":["_","require","cartesian","array_of_arrays","reduce","memo","arg","flatten","map","x","y","concat","permuations","array","length","v","arr","slice","filter","uniq","module","export"],"mappings":"AAAA;;AACA,IAAIA,IAAIC,QAAQ,YAAR,CAAR;;AAEA,IAAIC,YAAY,SAAZA,SAAY,CAASC,eAAT,EAA0B;AACxC,SAAOH,EAAEI,MAAF,CAASD,eAAT,EAA0B,UAASE,IAAT,EAAeC,GAAf,EAAoB;AACjD,WAAON,EAAEO,OAAF,CAAUP,EAAEQ,GAAF,CAAMH,IAAN,EAAY,UAASI,CAAT,EAAY;AACrC,aAAOT,EAAEQ,GAAF,CAAMF,GAAN,EAAW,UAASI,CAAT,EAAY;AAC1B,eAAOD,EAAEE,MAAF,CAAS,CAACD,CAAD,CAAT,CAAP;AACH,OAFM,CAAP;AAGH,KAJgB,CAAV,EAIH,IAJG,CAAP;AAKH,GANM,EAMJ,CAAE,EAAF,CANI,CAAP;AAOD,CARD;;AAUA,IAAIE,cAAc,SAAdA,WAAc,CAASC,KAAT,EAAgB;AAChC,MAAGA,MAAMC,MAAN,KAAiB,CAApB,EAAuB,OAAO,EAAP;AACvB,MAAIC,IAAIf,EAAEQ,GAAF,CAAMK,KAAN,EAAa,YAAU;AAC7B,QAAIG,MAAMH,MAAMI,KAAN,CAAY,CAAZ,CAAV;AACA,WAAOD,GAAP;AACD,GAHO,CAAR;AAIA,SAAOhB,EAAEkB,MAAF,CAAShB,UAAUa,CAAV,CAAT,EAAuB,UAASC,GAAT,EAAc;AAC1C,WAAOA,IAAIF,MAAJ,KAAed,EAAEmB,IAAF,CAAOH,GAAP,EAAYF,MAAlC;AACD,GAFM,CAAP;AAGD,CATD;;AAYAM,OAAOC,MAAP,CAAcnB,SAAd,GAA0BA,SAA1B;AACAkB,OAAOC,MAAP,CAAcT,WAAd,GAA4BA,WAA5B;;AAGA","file":"cartesian.js","sourcesContent":["'use strict';\nvar _ = require('underscore');\n\nvar cartesian = function(array_of_arrays) {\n  return _.reduce(array_of_arrays, function(memo, arg) {\n      return _.flatten(_.map(memo, function(x) {\n          return _.map(arg, function(y) {\n              return x.concat([y]);\n          });\n      }), true);\n  }, [ [] ]);\n};\n\nvar permuations = function(array) {\n  if(array.length === 0) return [];\n  var v = _.map(array, function(){\n    var arr = array.slice(0);\n    return arr;\n  });\n  return _.filter(cartesian(v), function(arr) {\n    return arr.length === _.uniq(arr).length;\n  });\n};\n\n\nmodule.export.cartesian = cartesian;\nmodule.export.permuations = permuations;\n\n\n/*\nvar create_regexp = function (words, capturing) {\n    words = _.map(words, function(w) {\n      return  w;\n    });\n    \n    var prefix = (!!capturing) ? '' : '?:';\n    \n    \n    //теперь надо составить все возможные перестановки words (регулярки не умеют AND без ?= оператора в подмножестве индексированного поиска таких нет)\n    var words_permutations = permuations(words);\n    var regexp_query = _.map(words_permutations, function(permutation) {\n      return '('+ prefix + permutation.join('.*')+')';\n    }).join('|');\n\n    return new RegExp(regexp_query,'ig');\n};\n\n\nvar text_a = [\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  sd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjfkljsdflk',\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  sd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjfkljsdflk',\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  sd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjfkljsdflk',\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  sd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjfkljsdflk',\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  ko lo veryveryverylonglonglonglonglonglong milgesung opanorasd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjfkljsdflk',\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  sd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjf bw kljsdflk',\n'jdjkshfjk sfdh df sdmfnmsdnfewlkrlewr fsd wekhjksdf  sd kjfskdfjksdhjkfh sdf dshf jksdhfk jsd jdjkshfjk sfdhjfkdhs aw dsfdslkjfksdjf bw kljsdflk',\n];\n\n\n\n\n//var text = text_a.join('\\n');\n//var re = create_regexp(['aw','bw']);\n//re = create_regexp(['jdjkshfjk', 'milgesung','jsd', 'opanorasd', 'sdf', 'dshf', 'jksdhfk']);\n\nvar words = ['ko','lo'];\nvar words = ['veryveryverylonglonglonglonglonglong','opanorasd', 'ko', 'lo'];\nconsole.time('aaa');\nfor(var i=0;i!=100000;++i) {\n  //var match = re.exec(text);\n  //re.exec('');\n  _.find(text_a, function(txt) {\n    return _.all(words, function(word) {\n      return txt.indexOf(word) > -1;\n    });\n  });\n}\nconsole.timeEnd('aaa');\n\n\n\nvar idx = _.find(text_a, function(txt) {\n  return _.all(words, function(word) {\n    return txt.indexOf(word) > -1;\n  });\n});\nconsole.log(idx);\n\n*/"]}