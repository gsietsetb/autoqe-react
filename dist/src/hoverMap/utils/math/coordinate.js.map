{"version":3,"sources":["../../../../../src/hoverMap/utils/math/coordinate.js"],"names":["_","require","isDef","v","undefined","Coordinate","opt_x","opt_y","x","y","prototype","clone","toString","equals","a","b","distance","dx","dy","Math","sqrt","magnitude","squaredDistance","difference","sum","ceil","floor","round","translate","tx","opt_ty","isNumber","scale","sx","opt_sy","sy","rotateRadians","radians","opt_center","center","cos","sin","module","exports"],"mappings":"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","file":"coordinate.js","sourcesContent":["var _ = require('underscore');\n// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A utility class for representing two-dimensional positions.\n */\n\n\nvar isDef = function(v) {\n  return v!==undefined && v!==null;\n};\n\n\n/**\n * Class for representing coordinates and positions.\n * @param {number=} opt_x Left, defaults to 0.\n * @param {number=} opt_y Top, defaults to 0.\n * @struct\n * @constructor\n */\nvar Coordinate = function(opt_x, opt_y) {\n  /**\n   * X-value\n   * @type {number}\n   */\n  this.x = isDef(opt_x) ? opt_x : 0;\n\n  /**\n   * Y-value\n   * @type {number}\n   */\n  this.y = isDef(opt_y) ? opt_y : 0;\n};\n\n\n/**\n * Returns a new copy of the coordinate.\n * @return {!Coordinate} A clone of this coordinate.\n */\nCoordinate.prototype.clone = function() {\n  return new Coordinate(this.x, this.y);\n};\n\n\nCoordinate.prototype.toString = function() {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\n\n/**\n * Compares coordinates for equality.\n * @param {Coordinate} a A Coordinate.\n * @param {Coordinate} b A Coordinate.\n * @return {boolean} True iff the coordinates are equal, or if both are null.\n */\nCoordinate.equals = function(a, b) {\n  if (a == b) {\n    return true;\n  }\n  if (!a || !b) {\n    return false;\n  }\n  return a.x == b.x && a.y == b.y;\n};\n\n\n/**\n * Returns the distance between two coordinates.\n * @param {!Coordinate} a A Coordinate.\n * @param {!Coordinate} b A Coordinate.\n * @return {number} The distance between {@code a} and {@code b}.\n */\nCoordinate.distance = function(a, b) {\n  var dx = a.x - b.x;\n  var dy = a.y - b.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n\n/**\n * Returns the magnitude of a coordinate.\n * @param {!Coordinate} a A Coordinate.\n * @return {number} The distance between the origin and {@code a}.\n */\nCoordinate.magnitude = function(a) {\n  return Math.sqrt(a.x * a.x + a.y * a.y);\n};\n\n\n\n/**\n * Returns the squared distance between two coordinates. Squared distances can\n * be used for comparisons when the actual value is not required.\n *\n * Performance note: eliminating the square root is an optimization often used\n * in lower-level languages, but the speed difference is not nearly as\n * pronounced in JavaScript (only a few percent.)\n *\n * @param {!Coordinate} a A Coordinate.\n * @param {!Coordinate} b A Coordinate.\n * @return {number} The squared distance between {@code a} and {@code b}.\n */\nCoordinate.squaredDistance = function(a, b) {\n  var dx = a.x - b.x;\n  var dy = a.y - b.y;\n  return dx * dx + dy * dy;\n};\n\n\n/**\n * Returns the difference between two coordinates as a new\n * Coordinate.\n * @param {!Coordinate} a A Coordinate.\n * @param {!Coordinate} b A Coordinate.\n * @return {!Coordinate} A Coordinate representing the difference\n *     between {@code a} and {@code b}.\n */\nCoordinate.difference = function(a, b) {\n  return new Coordinate(a.x - b.x, a.y - b.y);\n};\n\n\n/**\n * Returns the sum of two coordinates as a new Coordinate.\n * @param {!Coordinate} a A Coordinate.\n * @param {!Coordinate} b A Coordinate.\n * @return {!Coordinate} A Coordinate representing the sum of the two\n *     coordinates.\n */\nCoordinate.sum = function(a, b) {\n  return new Coordinate(a.x + b.x, a.y + b.y);\n};\n\n\n/**\n * Rounds the x and y fields to the next larger integer values.\n * @return {!Coordinate} This coordinate with ceil'd fields.\n */\nCoordinate.prototype.ceil = function() {\n  this.x = Math.ceil(this.x);\n  this.y = Math.ceil(this.y);\n  return this;\n};\n\n\n/**\n * Rounds the x and y fields to the next smaller integer values.\n * @return {!Coordinate} This coordinate with floored fields.\n */\nCoordinate.prototype.floor = function() {\n  this.x = Math.floor(this.x);\n  this.y = Math.floor(this.y);\n  return this;\n};\n\n\n/**\n * Rounds the x and y fields to the nearest integer values.\n * @return {!Coordinate} This coordinate with rounded fields.\n */\nCoordinate.prototype.round = function() {\n  this.x = Math.round(this.x);\n  this.y = Math.round(this.y);\n  return this;\n};\n\n\n/**\n * Translates this box by the given offsets. If a {@code Coordinate}\n * is given, then the x and y values are translated by the coordinate's x and y.\n * Otherwise, x and y are translated by {@code tx} and {@code opt_ty}\n * respectively.\n * @param {number|Coordinate} tx The value to translate x by or the\n *     the coordinate to translate this coordinate by.\n * @param {number=} opt_ty The value to translate y by.\n * @return {!Coordinate} This coordinate after translating.\n */\nCoordinate.prototype.translate = function(tx, opt_ty) {\n  if (tx instanceof Coordinate) {\n    this.x += tx.x;\n    this.y += tx.y;\n  } else {\n    this.x += tx;\n    if (_.isNumber(opt_ty)) {\n      this.y += opt_ty;\n    }\n  }\n  return this;\n};\n\n\n/**\n * Scales this coordinate by the given scale factors. The x and y values are\n * scaled by {@code sx} and {@code opt_sy} respectively.  If {@code opt_sy}\n * is not given, then {@code sx} is used for both x and y.\n * @param {number} sx The scale factor to use for the x dimension.\n * @param {number=} opt_sy The scale factor to use for the y dimension.\n * @return {!Coordinate} This coordinate after scaling.\n */\nCoordinate.prototype.scale = function(sx, opt_sy) {\n  var sy = _.isNumber(opt_sy) ? opt_sy : sx;\n  this.x *= sx;\n  this.y *= sy;\n  return this;\n};\n\n\n/**\n * Rotates this coordinate clockwise about the origin (or, optionally, the given\n * center) by the given angle, in radians.\n * @param {number} radians The angle by which to rotate this coordinate\n *     clockwise about the given center, in radians.\n * @param {!Coordinate=} opt_center The center of rotation. Defaults\n *     to (0, 0) if not given.\n */\nCoordinate.prototype.rotateRadians = function(radians, opt_center) {\n  var center = opt_center || new Coordinate(0, 0);\n\n  var x = this.x;\n  var y = this.y;\n  var cos = Math.cos(radians);\n  var sin = Math.sin(radians);\n\n  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;\n  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;\n};\n\nmodule.exports = Coordinate;\n\n"]}