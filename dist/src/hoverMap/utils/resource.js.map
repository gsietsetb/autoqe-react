{"version":3,"sources":["../../../../src/hoverMap/utils/resource.js"],"names":["route","options","routeTpl","routeTemplate","get","obj","http","textUtils","encode_object_properties","post","save","context","require","method","url","object","fetchOptions","baseOptions","credentials","Object","assign","FormData","body","headers","JSON","stringify","fetch","then","response","json"],"mappings":";;;;;;kBAoCe,UAASA,KAAT,EAAgBC,OAAhB,EAAyB;AACtC,MAAMC,WAAWC,cAAcH,KAAd,CAAjB;;AAEA,SAAO;AACLI,OADK,eACDC,GADC,EACI;AACP,aAAOC,KAAK,KAAL,EAAYJ,SAASK,UAAUC,wBAAV,CAAmCH,GAAnC,CAAT,CAAZ,EAA+D,IAA/D,EAAqEJ,OAArE,CAAP;AACD,KAHI;AAKLQ,QALK,gBAKAJ,GALA,EAKK;AACR,aAAOC,KAAK,MAAL,EAAaJ,SAASK,UAAUC,wBAAV,CAAmCH,GAAnC,CAAT,CAAb,EAAgEA,GAAhE,EAAqEJ,OAArE,CAAP;AACD,KAPI;AASLS,QATK,gBASAC,OATA,EASSN,GATT,EASc;AACjB,aAAOC,KAAK,MAAL,EAAaJ,SAASK,UAAUC,wBAAV,CAAmCG,OAAnC,CAAT,CAAb,EAAoEN,GAApE,EAAyEJ,OAAzE,CAAP;AACD;AAXI,GAAP;AAaD,C;;AApDD,IAAME,gBAAgBS,QAAQ,yBAAR,CAAtB;AACA,IAAML,YAAYK,QAAQ,eAAR,CAAlB;;AAGA,SAASN,IAAT,CAAcO,MAAd,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCd,OAAnC,EAA4C;AAC1C,MAAIe,qBAAJ;;AAEA,MAAMC,cAAc;AAClBJ,YAAQA,MADU;AAElBK,iBAAa;AAFK,GAApB;;AAKA,MAAIH,WAAW,IAAf,EAAqB;AACnBC,mBAAeG,OAAOC,MAAP,CAAc,EAAd,EAAkBH,WAAlB,EAA+BhB,OAA/B,CAAf;AACD,GAFD,MAEO;AACL,QAAIc,MAAJ,EAAY;AACV;AACA,UAAIA,kBAAkBM,QAAtB,EAAgC;AAC9BL,uBAAeG,OAAOC,MAAP,CAAc,EAACE,MAAMP,MAAP,EAAd,EAA8BE,WAA9B,EAA2ChB,OAA3C,CAAf;AACD,OAFD,MAEO;AACLe,uBAAeG,OAAOC,MAAP,CAAc;AACzBG,mBAAS;AACP,sBAAU,kBADH;AAEP,4BAAgB;AAFT,WADgB;AAKzBD,gBAAME,KAAKC,SAAL,CAAeV,MAAf;AALmB,SAAd,EAMVE,WANU,EAMGhB,OANH,CAAf;AAOD;AACF;AACF;;AAED,SAAOyB,MAAMZ,GAAN,EAAWE,YAAX,EACJW,IADI,CACC;AAAA,WAAYC,SAASC,IAAT,EAAZ;AAAA,GADD,CAAP;AAED","file":"resource.js","sourcesContent":["const routeTemplate = require('utils/route_template.js');\nconst textUtils = require('utils/text.js');\n\n\nfunction http(method, url, object, options) {\n  let fetchOptions;\n\n  const baseOptions = {\n    method: method,\n    credentials: 'include'\n  };\n\n  if (object === null) {\n    fetchOptions = Object.assign({}, baseOptions, options);\n  } else {\n    if (object) {\n      // if (object && object.constructor && object.constructor.toString().indexOf('FormData') > -1) {\n      if (object instanceof FormData) {\n        fetchOptions = Object.assign({body: object}, baseOptions, options);\n      } else {\n        fetchOptions = Object.assign({\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(object)\n          }, baseOptions, options);\n      }\n    }\n  }\n\n  return fetch(url, fetchOptions)\n    .then(response => response.json());\n}\n\n\nexport default function(route, options) {\n  const routeTpl = routeTemplate(route);\n\n  return {\n    get(obj) {\n      return http('get', routeTpl(textUtils.encode_object_properties(obj)), null, options);\n    },\n\n    post(obj) {\n      return http('post', routeTpl(textUtils.encode_object_properties(obj)), obj, options);\n    },\n\n    save(context, obj) {\n      return http('post', routeTpl(textUtils.encode_object_properties(context)), obj, options);\n    }\n  };\n}\n"]}