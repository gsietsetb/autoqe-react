{"version":3,"sources":["../../../../src/hoverMap/stores/map_store.js"],"names":["map","K_LAST_VISIBLE_ROW_AT_SERVER_RENDERING","ptInSect","x","a","b","ptInRect","pt","rect","get","calcFilteredAndSortedMarkers","data","mapInfo","marginBounds","filter","m","defaultMapState","fromJS","dataFiltered","center","bounds","zoom","openBalloonIndex","hoverMarkerIndex","tableRowsInfo","hoveredRowIndex","visibleRowFirst","visibleRowLast","maxVisibleRows","state","exampleActionType","type","markersData","set","update","s","merge"],"mappings":"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","file":"map_store.js","sourcesContent":["import {\n  QUERY_MAP,\n  CHANGE_BOUNDS_MAP,\n  TABLE_VISIBLE_ROWS_CHANGE_MAP,\n  TABLE_HOVERED_ROWS_INDEX_CHANGE_MAP,\n  MARKER_HOVER_INDEX_CHANGE_MAP,\n  SHOW_BALLON_MAP} from '../consts/map_actions_types.js';\n\nimport immutable, {Map, List} from 'immutable';\n\nconst K_LAST_VISIBLE_ROW_AT_SERVER_RENDERING = 5;\n\nfunction ptInSect(x, a, b) {\n  return (x - a) * (x - b) <= 0;\n}\n\nfunction ptInRect(pt, rect) {\n  return ptInSect(pt.get('lat'), rect.get(0), rect.get(2)) && ptInSect(pt.get('lng'), rect.get(1), rect.get(3));\n}\n\n// use rbush https://github.com/mourner/rbush if you have really big amount of points\nfunction calcFilteredAndSortedMarkers(data, mapInfo) {\n  const marginBounds = mapInfo && mapInfo.get('marginBounds');\n\n  if (!data || !marginBounds) {\n    return new List();\n  }\n\n  return data\n    .filter(m => ptInRect(m, marginBounds));\n}\n\nfunction defaultMapState() {\n  return immutable.fromJS({\n    data: [],\n    dataFiltered: [],\n\n    mapInfo: {\n      center: [59.938043, 30.337157],\n      // set for server rendering for popular screen res\n      bounds: [60.325132160343145, 29.13415407031249, 59.546382183279206, 31.54015992968749],\n      marginBounds: [60.2843135300829, 29.21655153124999, 59.58811868963835, 31.45776246874999],\n      zoom: 9\n    },\n\n    openBalloonIndex: -1,\n\n    hoverMarkerIndex: -1,\n\n    tableRowsInfo: {\n      hoveredRowIndex: -1,\n      visibleRowFirst: 0,\n      visibleRowLast: K_LAST_VISIBLE_ROW_AT_SERVER_RENDERING,\n      maxVisibleRows: K_LAST_VISIBLE_ROW_AT_SERVER_RENDERING\n    }\n  });\n}\n\nexport default function map(state = defaultMapState(), {type: exampleActionType, ...data}) {\n  switch (exampleActionType) {\n    case QUERY_MAP:\n      const {markersData} = data;\n      return state\n        .set('data', markersData)\n        .update(s => s.set('dataFiltered', calcFilteredAndSortedMarkers(s.get('data'), s.get('mapInfo'))));\n\n    case CHANGE_BOUNDS_MAP:\n      const {center, zoom, bounds, marginBounds} = data;\n      return state\n        .update('mapInfo', mapInfo => mapInfo.merge({center, zoom, bounds, marginBounds}))\n        .set('openBalloonIndex', -1)\n        .update(s => s.set('dataFiltered', calcFilteredAndSortedMarkers(s.get('data'), s.get('mapInfo'))));\n\n    case TABLE_VISIBLE_ROWS_CHANGE_MAP:\n      const {visibleRowFirst, visibleRowLast, maxVisibleRows} = data;\n      return state\n        .update('tableRowsInfo', tableRowsInfo => tableRowsInfo.merge({visibleRowFirst, visibleRowLast, maxVisibleRows}))\n        .set('openBalloonIndex', -1);\n\n    case TABLE_HOVERED_ROWS_INDEX_CHANGE_MAP:\n      const {hoveredRowIndex} = data;\n      return state\n        .update('tableRowsInfo', tableRowsInfo => tableRowsInfo.merge({hoveredRowIndex}));\n\n    case MARKER_HOVER_INDEX_CHANGE_MAP:\n      const {hoverMarkerIndex} = data;\n      return state\n        .set('hoverMarkerIndex', hoverMarkerIndex);\n\n    case SHOW_BALLON_MAP:\n      const {openBalloonIndex} = data;\n      return state\n        .set('openBalloonIndex', openBalloonIndex === state.get('openBalloonIndex') ? -1 : openBalloonIndex);\n\n    default:\n      return state;\n  }\n}\n\n"]}