{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/cx.js"],"names":["slashReplaceRegex","cache","getClassName","className","replace","cx","classNames","classNamesArray","Object","keys","filter","Array","prototype","slice","call","arguments","map","join","module","exports"],"mappings":";;;;AAAA;;;;;;;;;;;AAWA,IAAIA,oBAAoB,KAAxB;AACA,IAAIC,QAAQ,EAAZ;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B,MAAIF,MAAME,SAAN,CAAJ,EAAsB;AACpB,WAAOF,MAAME,SAAN,CAAP;AACD;;AAEDF,QAAME,SAAN,IAAmBA,UAAUC,OAAV,CAAkBJ,iBAAlB,EAAqC,GAArC,CAAnB;AACA,SAAOC,MAAME,SAAN,CAAP;AACD;;AAED;;;;;;;;;;;;;;;AAeA,SAASE,EAAT,CAAYC,UAAZ,EAAwB;AACtB,MAAIC,eAAJ;AACA,MAAI,QAAOD,UAAP,yCAAOA,UAAP,MAAqB,QAAzB,EAAmC;AACjCC,sBAAkBC,OAAOC,IAAP,CAAYH,UAAZ,EAAwBI,MAAxB,CAA+B,UAASP,SAAT,EAAoB;AACnE,aAAOG,WAAWH,SAAX,CAAP;AACD,KAFiB,CAAlB;AAGD,GAJD,MAIO;AACLI,sBAAkBI,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAlB;AACD;;AAED,SAAOR,gBAAgBS,GAAhB,CAAoBd,YAApB,EAAkCe,IAAlC,CAAuC,GAAvC,CAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBd,EAAjB","file":"cx.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\nvar slashReplaceRegex = /\\//g;\nvar cache = {};\n\nfunction getClassName(className) {\n  if (cache[className]) {\n    return cache[className];\n  }\n\n  cache[className] = className.replace(slashReplaceRegex, '_');\n  return cache[className];\n}\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\nfunction cx(classNames) {\n  var classNamesArray;\n  if (typeof classNames == 'object') {\n    classNamesArray = Object.keys(classNames).filter(function(className) {\n      return classNames[className];\n    });\n  } else {\n    classNamesArray = Array.prototype.slice.call(arguments);\n  }\n\n  return classNamesArray.map(getClassName).join(' ');\n}\n\nmodule.exports = cx;\n"]}