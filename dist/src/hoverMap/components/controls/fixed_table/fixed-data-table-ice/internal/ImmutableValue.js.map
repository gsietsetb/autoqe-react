{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/ImmutableValue.js"],"names":["invariant","require","isNode","keyOf","SECRET_KEY","_DONT_EVER_TYPE_THIS_SECRET_KEY","ImmutableValue","secret","mergeAllPropertiesInto","destination","propertyObjects","argLength","length","i","Object","assign","deepFreezeRootNode","object","freeze","prop","hasOwnProperty","recurseDeepFreeze","seal","shouldRecurseFreeze","Math","random","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;AAEA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;AACA,IAAIC,SAASD,QAAQ,UAAR,CAAb;AACA,IAAIE,QAAQF,QAAQ,SAAR,CAAZ;;AAEA,IAAIG,aAAaD,MAAM,EAACE,iCAAiC,IAAlC,EAAN,CAAjB;;AAEA;;;;;;;;;;;;;;;;;AAiBE;;;;;;;;;;AAUA,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC9BP,YACEO,WAAWD,eAAeF,UAAf,CADb,EAEE,sEACA,+DAHF;AAKD;;AAED;;;;;;AAMAE,eAAeE,sBAAf,GAAsC,UAASC,WAAT,EAAsBC,eAAtB,EAAuC;AAC3E,MAAIC,YAAYD,gBAAgBE,MAAhC;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAApB,EAA+BE,GAA/B,EAAoC;AAClCC,WAAOC,MAAP,CAAcN,WAAd,EAA2BC,gBAAgBG,CAAhB,CAA3B;AACD;AACF,CALD;;AAQA;;;;;;AAMAP,eAAeU,kBAAf,GAAkC,UAASC,MAAT,EAAiB;AACjD,MAAIf,OAAOe,MAAP,CAAJ,EAAoB;AAClB,WADkB,CACV;AACT;AACDH,SAAOI,MAAP,CAAcD,MAAd,EAJiD,CAI1B;AACvB,OAAK,IAAIE,IAAT,IAAiBF,MAAjB,EAAyB;AACvB,QAAIA,OAAOG,cAAP,CAAsBD,IAAtB,CAAJ,EAAiC;AAC/Bb,qBAAee,iBAAf,CAAiCJ,OAAOE,IAAP,CAAjC;AACD;AACF;AACDL,SAAOQ,IAAP,CAAYL,MAAZ;AACD,CAXD;;AAaA;;;;;;AAMAX,eAAee,iBAAf,GAAiC,UAASJ,MAAT,EAAiB;AAChD,MAAIf,OAAOe,MAAP,KAAkB,CAACX,eAAeiB,mBAAf,CAAmCN,MAAnC,CAAvB,EAAmE;AACjE,WADiE,CACzD;AACT;AACDH,SAAOI,MAAP,CAAcD,MAAd,EAJgD,CAIzB;AACvB,OAAK,IAAIE,IAAT,IAAiBF,MAAjB,EAAyB;AACvB,QAAIA,OAAOG,cAAP,CAAsBD,IAAtB,CAAJ,EAAiC;AAC/Bb,qBAAee,iBAAf,CAAiCJ,OAAOE,IAAP,CAAjC;AACD;AACF;AACDL,SAAOQ,IAAP,CAAYL,MAAZ;AACD,CAXD;;AAaA;;;;;;;;AAQAX,eAAeiB,mBAAf,GAAmC,UAASN,MAAT,EAAiB;AAClD,SACE,QAAOA,MAAP,yCAAOA,MAAP,OAAkB,QAAlB,IACA,EAAEA,kBAAkBX,cAApB,CADA,IAEAW,WAAW,IAHb;AAKD,CAND;;AASFX,eAAeD,+BAAf,GAAiDmB,KAAKC,MAAL,EAAjD;;AAEAC,OAAOC,OAAP,GAAiBrB,cAAjB","file":"ImmutableValue.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ImmutableValue\n * @typechecks\n */\n\n\"use strict\";\n\nvar invariant = require('./invariant');\nvar isNode = require('./isNode');\nvar keyOf = require('./keyOf');\n\nvar SECRET_KEY = keyOf({_DONT_EVER_TYPE_THIS_SECRET_KEY: null});\n\n/**\n * `ImmutableValue` provides a guarantee of immutability at developer time when\n * strict mode is used. The extra computations required to enforce immutability\n * are stripped out in production for performance reasons. `ImmutableValue`\n * guarantees to enforce immutability for enumerable, own properties. This\n * allows easy wrapping of `ImmutableValue` with the ability to store\n * non-enumerable properties on the instance that only your static methods\n * reason about. In order to achieve IE8 compatibility (which doesn't have the\n * ability to define non-enumerable properties), modules that want to build\n * their own reasoning of `ImmutableValue`s and store computations can define\n * their non-enumerable properties under the name `toString`, and in IE8 only\n * define a standard property called `toString` which will mistakenly be\n * considered not enumerable due to its name (but only in IE8). The only\n * limitation is that no one can store their own `toString` property.\n * https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug\n */\n\n  /**\n   * An instance of `ImmutableValue` appears to be a plain JavaScript object,\n   * except `instanceof ImmutableValue` evaluates to `true`, and it is deeply\n   * frozen in development mode.\n   *\n   * @param {number} secret Ensures this isn't accidentally constructed outside\n   * of convenience constructors. If created outside of a convenience\n   * constructor, may not be frozen. Forbidding that use case for now until we\n   * have a better API.\n   */\n  function ImmutableValue(secret) {\n    invariant(\n      secret === ImmutableValue[SECRET_KEY],\n      'Only certain classes should create instances of `ImmutableValue`.' +\n      'You probably want something like ImmutableValueObject.create.'\n    );\n  }\n\n  /**\n   * Helper method for classes that make use of `ImmutableValue`.\n   * @param {ImmutableValue} destination Object to merge properties into.\n   * @param {object} propertyObjects List of objects to merge into\n   * `destination`.\n   */\n  ImmutableValue.mergeAllPropertiesInto=function(destination, propertyObjects) {\n    var argLength = propertyObjects.length;\n    for (var i = 0; i < argLength; i++) {\n      Object.assign(destination, propertyObjects[i]);\n    }\n  };\n\n\n  /**\n   * Freezes the supplied object deeply. Other classes may implement their own\n   * version based on this.\n   *\n   * @param {*} object The object to freeze.\n   */\n  ImmutableValue.deepFreezeRootNode=function(object) {\n    if (isNode(object)) {\n      return; // Don't try to freeze DOM nodes.\n    }\n    Object.freeze(object); // First freeze the object.\n    for (var prop in object) {\n      if (object.hasOwnProperty(prop)) {\n        ImmutableValue.recurseDeepFreeze(object[prop]);\n      }\n    }\n    Object.seal(object);\n  };\n\n  /**\n   * Differs from `deepFreezeRootNode`, in that we first check if this is a\n   * necessary recursion. If the object is already an `ImmutableValue`, then the\n   * recursion is unnecessary as it is already frozen. That check obviously\n   * wouldn't work for the root node version `deepFreezeRootNode`!\n   */\n  ImmutableValue.recurseDeepFreeze=function(object) {\n    if (isNode(object) || !ImmutableValue.shouldRecurseFreeze(object)) {\n      return; // Don't try to freeze DOM nodes.\n    }\n    Object.freeze(object); // First freeze the object.\n    for (var prop in object) {\n      if (object.hasOwnProperty(prop)) {\n        ImmutableValue.recurseDeepFreeze(object[prop]);\n      }\n    }\n    Object.seal(object);\n  };\n\n  /**\n   * Checks if an object should be deep frozen. Instances of `ImmutableValue`\n   * are assumed to have already been deep frozen, so we can have large\n   * `process.env.NODE_ENV !== 'production'` time savings by skipping freezing of them.\n   *\n   * @param {*} object The object to check.\n   * @return {boolean} Whether or not deep freeze is needed.\n   */\n  ImmutableValue.shouldRecurseFreeze=function(object) {\n    return (\n      typeof object === 'object' &&\n      !(object instanceof ImmutableValue) &&\n      object !== null\n    );\n  };\n\n\nImmutableValue._DONT_EVER_TYPE_THIS_SECRET_KEY = Math.random();\n\nmodule.exports = ImmutableValue;\n"]}