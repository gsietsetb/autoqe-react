{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/debounceCore.js"],"names":["debounce","func","wait","context","setTimeoutFunc","clearTimeoutFunc","setTimeout","clearTimeout","timeout","debouncer","args","$__0","$__1","arguments","length","push","reset","apply","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,OAA9B,EAAuCC,cAAvC,EAAuDC,gBAAvD,EAAyE;AACvED,mBAAiBA,kBAAkBE,UAAnC;AACAD,qBAAmBA,oBAAoBE,YAAvC;AACA,MAAIC,OAAJ;;AAEA,WAASC,SAAT,GAAqB;AAAC,SAAK,IAAIC,OAAK,EAAT,EAAYC,OAAK,CAAjB,EAAmBC,OAAKC,UAAUC,MAAvC,EAA8CH,OAAKC,IAAnD,EAAwDD,MAAxD;AAAgED,WAAKK,IAAL,CAAUF,UAAUF,IAAV,CAAV;AAAhE,KACpBF,UAAUO,KAAV;;AAEAR,cAAUJ,eAAe,YAAW;AAClCH,WAAKgB,KAAL,CAAWd,OAAX,EAAoBO,IAApB;AACD,KAFS,EAEPR,IAFO,CAAV;AAGD;;AAEDO,YAAUO,KAAV,GAAkB,YAAW;AAC3BX,qBAAiBG,OAAjB;AACD,GAFD;;AAIA,SAAOC,SAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBnB,QAAjB","file":"debounceCore.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule debounceCore\n * @typechecks\n */\n\n/**\n * Invokes the given callback after a specified number of milliseconds have\n * elapsed, ignoring subsequent calls.\n *\n * For example, if you wanted to update a preview after the user stops typing\n * you could do the following:\n *\n *   elem.addEventListener('keyup', debounce(this.updatePreview, 250), false);\n *\n * The returned function has a reset method which can be called to cancel a\n * pending invocation.\n *\n *   var debouncedUpdatePreview = debounce(this.updatePreview, 250);\n *   elem.addEventListener('keyup', debouncedUpdatePreview, false);\n *\n *   // later, to cancel pending calls\n *   debouncedUpdatePreview.reset();\n *\n * @param {function} func - the function to debounce\n * @param {number} wait - how long to wait in milliseconds\n * @param {*} context - optional context to invoke the function in\n * @param {?function} setTimeoutFunc - an implementation of setTimeout\n *  if nothing is passed in the default setTimeout function is used\n  * @param {?function} clearTimeoutFunc - an implementation of clearTimeout\n *  if nothing is passed in the default clearTimeout function is used\n */\nfunction debounce(func, wait, context, setTimeoutFunc, clearTimeoutFunc) {\n  setTimeoutFunc = setTimeoutFunc || setTimeout;\n  clearTimeoutFunc = clearTimeoutFunc || clearTimeout;\n  var timeout;\n\n  function debouncer() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);\n    debouncer.reset();\n\n    timeout = setTimeoutFunc(function() {\n      func.apply(context, args);\n    }, wait);\n  }\n\n  debouncer.reset = function() {\n    clearTimeoutFunc(timeout);\n  };\n\n  return debouncer;\n}\n\nmodule.exports = debounce;\n"]}