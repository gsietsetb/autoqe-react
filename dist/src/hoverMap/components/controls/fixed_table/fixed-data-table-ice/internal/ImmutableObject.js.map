{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/ImmutableObject.js"],"names":["ImmutableValue","require","invariant","keyOf","mergeHelpers","checkMergeObjectArgs","isTerminal","SECRET_KEY","_DONT_EVER_TYPE_THIS_SECRET_KEY","assertImmutable","immutable","ImmutableValue____Key","hasOwnProperty","ImmutableObject","____SuperProtoOfImmutableValue","prototype","Object","create","constructor","__superConstructor__","call","mergeAllPropertiesInto","arguments","process","env","NODE_ENV","deepFreezeRootNode","obj","apply","set","put","undefined","Array","isArray","setProperty","immutableObject","fieldName","putField","deleteProperty","droppedField","copy","key","setDeep","_setDeep","values","keys","map","totalNewFields","ii","length","newKeys","newKey","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;;;;AAEA,IAAIA,iBAAiBC,QAAQ,kBAAR,CAArB;;AAEA,IAAIC,YAAYD,QAAQ,aAAR,CAAhB;AACA,IAAIE,QAAQF,QAAQ,SAAR,CAAZ;AACA,IAAIG,eAAeH,QAAQ,gBAAR,CAAnB;;AAEA,IAAII,uBAAuBD,aAAaC,oBAAxC;AACA,IAAIC,aAAaF,aAAaE,UAA9B;;AAEA,IAAIC,aAAaJ,MAAM,EAACK,iCAAiC,IAAlC,EAAN,CAAjB;;AAEA;;;AAGA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClCR,YACEQ,qBAAqBV,cADvB,EAEE,0EACA,6BAHF;AAKD;;AAED;;;;;;AAMA,KAAI,IAAIW,qBAAR,IAAiCX,cAAjC,EAAgD;AAAC,MAAGA,eAAeY,cAAf,CAA8BD,qBAA9B,CAAH,EAAwD;AAACE,oBAAgBF,qBAAhB,IAAuCX,eAAeW,qBAAf,CAAvC;AAA8E;AAAC,KAAIG,iCAA+Bd,mBAAiB,IAAjB,GAAsB,IAAtB,GAA2BA,eAAee,SAA7E,CAAuFF,gBAAgBE,SAAhB,GAA0BC,OAAOC,MAAP,CAAcH,8BAAd,CAA1B,CAAwED,gBAAgBE,SAAhB,CAA0BG,WAA1B,GAAsCL,eAAtC,CAAsDA,gBAAgBM,oBAAhB,GAAqCnB,cAArC;AAC5Y;;;;AAIA,SAASa,eAAT,GAA2B;AACzBb,iBAAeoB,IAAf,CAAoB,IAApB,EAAyBpB,eAAeO,UAAf,CAAzB;AACAP,iBAAeqB,sBAAf,CAAsC,IAAtC,EAA4CC,SAA5C;AACA,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCzB,mBAAe0B,kBAAf,CAAkC,IAAlC;AACD;AACF;;AAED;;;;;;AAMAb,gBAAgBI,MAAhB,GAAuB,YAAW;AAChC,MAAIU,MAAMX,OAAOC,MAAP,CAAcJ,gBAAgBE,SAA9B,CAAV;AACAF,kBAAgBe,KAAhB,CAAsBD,GAAtB,EAA2BL,SAA3B;AACA,SAAOK,GAAP;AACD,CAJD;;AAMA;;;;;;;;;;AAUAd,gBAAgBgB,GAAhB,GAAoB,UAASnB,SAAT,EAAoBoB,GAApB,EAAyB;AAC3CrB,kBAAgBC,SAAhB;AACAR,YACE,QAAO4B,GAAP,yCAAOA,GAAP,OAAe,QAAf,IAA2BA,QAAQC,SAAnC,IAAgD,CAACC,MAAMC,OAAN,CAAcH,GAAd,CADnD,EAEE,yCAFF;AAIA,SAAO,IAAIjB,eAAJ,CAAoBH,SAApB,EAA+BoB,GAA/B,CAAP;AACD,CAPD;;AASA;;;;;;;;;AASAjB,gBAAgBqB,WAAhB,GAA4B,UAASC,eAAT,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+C;AACzE,MAAIP,MAAM,EAAV;AACAA,MAAIM,SAAJ,IAAiBC,QAAjB;AACA,SAAOxB,gBAAgBgB,GAAhB,CAAoBM,eAApB,EAAqCL,GAArC,CAAP;AACD,CAJD;;AAMA;;;;;;;;AAQAjB,gBAAgByB,cAAhB,GAA+B,UAASH,eAAT,EAA0BI,YAA1B,EAAwC;AACrE,MAAIC,OAAO,EAAX;AACA,OAAK,IAAIC,GAAT,IAAgBN,eAAhB,EAAiC;AAC/B,QAAIM,QAAQF,YAAR,IAAwBJ,gBAAgBvB,cAAhB,CAA+B6B,GAA/B,CAA5B,EAAiE;AAC/DD,WAAKC,GAAL,IAAYN,gBAAgBM,GAAhB,CAAZ;AACD;AACF;AACD,SAAO,IAAI5B,eAAJ,CAAoB2B,IAApB,CAAP;AACD,CARD;;AAUA;;;;;;;;;;AAUA3B,gBAAgB6B,OAAhB,GAAwB,UAAShC,SAAT,EAAoBoB,GAApB,EAAyB;AAC/CrB,kBAAgBC,SAAhB;AACA,SAAOiC,SAASjC,SAAT,EAAoBoB,GAApB,CAAP;AACD,CAHD;;AAKA;;;;;;AAMAjB,gBAAgB+B,MAAhB,GAAuB,UAASlC,SAAT,EAAoB;AACzC,SAAOM,OAAO6B,IAAP,CAAYnC,SAAZ,EAAuBoC,GAAvB,CAA2B,UAASL,GAAT,EAAe;AAAC,WAAO/B,UAAU+B,GAAV,CAAP;AAAuB,GAAlE,CAAP;AACD,CAFD;;AAKF,SAASE,QAAT,CAAkBhB,GAAlB,EAAuBG,GAAvB,EAA4B;AAC1BzB,uBAAqBsB,GAArB,EAA0BG,GAA1B;AACA,MAAIiB,iBAAiB,EAArB;;AAEA;AACA,MAAIF,OAAO7B,OAAO6B,IAAP,CAAYlB,GAAZ,CAAX;AACA,OAAK,IAAIqB,KAAK,CAAd,EAAiBA,KAAKH,KAAKI,MAA3B,EAAmCD,IAAnC,EAAyC;AACvC,QAAIP,MAAMI,KAAKG,EAAL,CAAV;AACA,QAAI,CAAClB,IAAIlB,cAAJ,CAAmB6B,GAAnB,CAAL,EAA8B;AAC5BM,qBAAeN,GAAf,IAAsBd,IAAIc,GAAJ,CAAtB;AACD,KAFD,MAEO,IAAInC,WAAWqB,IAAIc,GAAJ,CAAX,KAAwBnC,WAAWwB,IAAIW,GAAJ,CAAX,CAA5B,EAAkD;AACvDM,qBAAeN,GAAf,IAAsBX,IAAIW,GAAJ,CAAtB;AACD,KAFM,MAEA;AACLM,qBAAeN,GAAf,IAAsBE,SAAShB,IAAIc,GAAJ,CAAT,EAAmBX,IAAIW,GAAJ,CAAnB,CAAtB;AACD;AACF;;AAED;AACA,MAAIS,UAAUlC,OAAO6B,IAAP,CAAYf,GAAZ,CAAd;AACA,OAAKkB,KAAK,CAAV,EAAaA,KAAKE,QAAQD,MAA1B,EAAkCD,IAAlC,EAAwC;AACtC,QAAIG,SAASD,QAAQF,EAAR,CAAb;AACA,QAAIrB,IAAIf,cAAJ,CAAmBuC,MAAnB,CAAJ,EAAgC;AAC9B;AACD;AACDJ,mBAAeI,MAAf,IAAyBrB,IAAIqB,MAAJ,CAAzB;AACD;;AAED,SACExB,eAAe3B,cAAf,GAAgC,IAAIa,eAAJ,CAAoBkC,cAApB,CAAhC,GACAjB,eAAe9B,cAAf,GAAgC,IAAIa,eAAJ,CAAoBkC,cAApB,CAAhC,GACAA,cAHF;AAKD;;AAEDK,OAAOC,OAAP,GAAiBxC,eAAjB","file":"ImmutableObject.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ImmutableObject\n * @typechecks\n */\n\n\"use strict\";\n\nvar ImmutableValue = require('./ImmutableValue');\n\nvar invariant = require('./invariant');\nvar keyOf = require('./keyOf');\nvar mergeHelpers = require('./mergeHelpers');\n\nvar checkMergeObjectArgs = mergeHelpers.checkMergeObjectArgs;\nvar isTerminal = mergeHelpers.isTerminal;\n\nvar SECRET_KEY = keyOf({_DONT_EVER_TYPE_THIS_SECRET_KEY: null});\n\n/**\n * Static methods creating and operating on instances of `ImmutableValue`.\n */\nfunction assertImmutable(immutable) {\n  invariant(\n    immutable instanceof ImmutableValue,\n    'ImmutableObject: Attempted to set fields on an object that is not an ' +\n    'instance of ImmutableValue.'\n  );\n}\n\n/**\n * Static methods for reasoning about instances of `ImmutableObject`. Execute\n * the freeze commands in `process.env.NODE_ENV !== 'production'` mode to alert the programmer that something\n * is attempting to mutate. Since freezing is very expensive, we avoid doing it\n * at all in production.\n */\nfor(var ImmutableValue____Key in ImmutableValue){if(ImmutableValue.hasOwnProperty(ImmutableValue____Key)){ImmutableObject[ImmutableValue____Key]=ImmutableValue[ImmutableValue____Key];}}var ____SuperProtoOfImmutableValue=ImmutableValue===null?null:ImmutableValue.prototype;ImmutableObject.prototype=Object.create(____SuperProtoOfImmutableValue);ImmutableObject.prototype.constructor=ImmutableObject;ImmutableObject.__superConstructor__=ImmutableValue;\n  /**\n   * @arguments {array<object>} The arguments is an array of objects that, when\n   * merged together, will form the immutable objects.\n   */\n  function ImmutableObject() {\n    ImmutableValue.call(this,ImmutableValue[SECRET_KEY]);\n    ImmutableValue.mergeAllPropertiesInto(this, arguments);\n    if (process.env.NODE_ENV !== 'production') {\n      ImmutableValue.deepFreezeRootNode(this);\n    }\n  }\n\n  /**\n   * DEPRECATED - prefer to instantiate with new ImmutableObject().\n   *\n   * @arguments {array<object>} The arguments is an array of objects that, when\n   * merged together, will form the immutable objects.\n   */\n  ImmutableObject.create=function() {\n    var obj = Object.create(ImmutableObject.prototype);\n    ImmutableObject.apply(obj, arguments);\n    return obj;\n  };\n\n  /**\n   * Returns a new `ImmutableValue` that is identical to the supplied\n   * `ImmutableValue` but with the specified changes, `put`. Any keys that are\n   * in the intersection of `immutable` and `put` retain the ordering of\n   * `immutable`. New keys are placed after keys that exist in `immutable`.\n   *\n   * @param {ImmutableValue} immutable Starting object.\n   * @param {?object} put Fields to merge into the object.\n   * @return {ImmutableValue} The result of merging in `put` fields.\n   */\n  ImmutableObject.set=function(immutable, put) {\n    assertImmutable(immutable);\n    invariant(\n      typeof put === 'object' && put !== undefined && !Array.isArray(put),\n      'Invalid ImmutableMap.set argument `put`'\n    );\n    return new ImmutableObject(immutable, put);\n  };\n\n  /**\n   * Sugar for `ImmutableObject.set(ImmutableObject, {fieldName: putField})`.\n   * Look out for key crushing: Use `keyOf()` to guard against it.\n   *\n   * @param {ImmutableValue} immutableObject Object on which to set properties.\n   * @param {string} fieldName Name of the field to set.\n   * @param {*} putField Value of the field to set.\n   * @return {ImmutableValue} new ImmutableValue as described in `set`.\n   */\n  ImmutableObject.setProperty=function(immutableObject, fieldName, putField) {\n    var put = {};\n    put[fieldName] = putField;\n    return ImmutableObject.set(immutableObject, put);\n  };\n\n  /**\n   * Returns a new immutable object with the given field name removed.\n   * Look out for key crushing: Use `keyOf()` to guard against it.\n   *\n   * @param {ImmutableObject} immutableObject from which to delete the key.\n   * @param {string} droppedField Name of the field to delete.\n   * @return {ImmutableObject} new ImmutableObject without the key\n   */\n  ImmutableObject.deleteProperty=function(immutableObject, droppedField) {\n    var copy = {};\n    for (var key in immutableObject) {\n      if (key !== droppedField && immutableObject.hasOwnProperty(key)) {\n        copy[key] = immutableObject[key];\n      }\n    }\n    return new ImmutableObject(copy);\n  };\n\n  /**\n   * Returns a new `ImmutableValue` that is identical to the supplied object but\n   * with the supplied changes recursively applied.\n   *\n   * Experimental. Likely does not handle `Arrays` correctly.\n   *\n   * @param {ImmutableValue} immutable Object on which to set fields.\n   * @param {object} put Fields to merge into the object.\n   * @return {ImmutableValue} The result of merging in `put` fields.\n   */\n  ImmutableObject.setDeep=function(immutable, put) {\n    assertImmutable(immutable);\n    return _setDeep(immutable, put);\n  };\n\n  /**\n   * Retrieves an ImmutableObject's values as an array.\n   *\n   * @param {ImmutableValue} immutable\n   * @return {array}\n   */\n  ImmutableObject.values=function(immutable) {\n    return Object.keys(immutable).map(function(key)  {return immutable[key];});\n  };\n\n\nfunction _setDeep(obj, put) {\n  checkMergeObjectArgs(obj, put);\n  var totalNewFields = {};\n\n  // To maintain the order of the keys, copy the base object's entries first.\n  var keys = Object.keys(obj);\n  for (var ii = 0; ii < keys.length; ii++) {\n    var key = keys[ii];\n    if (!put.hasOwnProperty(key)) {\n      totalNewFields[key] = obj[key];\n    } else if (isTerminal(obj[key]) || isTerminal(put[key])) {\n      totalNewFields[key] = put[key];\n    } else {\n      totalNewFields[key] = _setDeep(obj[key], put[key]);\n    }\n  }\n\n  // Apply any new keys that the base obj didn't have.\n  var newKeys = Object.keys(put);\n  for (ii = 0; ii < newKeys.length; ii++) {\n    var newKey = newKeys[ii];\n    if (obj.hasOwnProperty(newKey)) {\n      continue;\n    }\n    totalNewFields[newKey] = put[newKey];\n  }\n\n  return (\n    obj instanceof ImmutableValue ? new ImmutableObject(totalNewFields) :\n    put instanceof ImmutableValue ? new ImmutableObject(totalNewFields) :\n    totalNewFields\n  );\n}\n\nmodule.exports = ImmutableObject;\n"]}