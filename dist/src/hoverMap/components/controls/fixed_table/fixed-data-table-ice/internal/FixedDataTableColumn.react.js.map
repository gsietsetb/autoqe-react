{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/FixedDataTableColumn.react.js"],"names":["React","require","PropTypes","FixedDataTableColumn","createClass","displayName","statics","__TableColumn__","propTypes","align","oneOf","cellClassName","string","cellRenderer","func","cellDataGetter","dataKey","oneOfType","number","isRequired","headerRenderer","footerRenderer","columnData","object","label","width","minWidth","maxWidth","flexGrow","isResizable","bool","render","process","env","NODE_ENV","Error","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;AAYA,IAAIA,QAAQC,QAAQ,SAAR,CAAZ;;AAEA,IAAIC,YAAYF,MAAME,SAAtB;;AAEA;;;AAGA,IAAIC,uBAAuBH,MAAMI,WAAN,CAAkB,EAACC,aAAa,sBAAd;AAC3CC,WAAS;AACPC,qBAAiB;AADV,GADkC;;AAK3CC,aAAW;AACT;;;AAGAC,WAAOP,UAAUQ,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAhB,CAJE;;AAMT;;;AAGAC,mBAAeT,UAAUU,MAThB;;AAWT;;;;;;;;;;;;;AAaAC,kBAAcX,UAAUY,IAxBf;;AA0BT;;;;;;;AAOAC,oBAAgBb,UAAUY,IAjCjB;;AAmCT;;;;;AAKAE,aAASd,UAAUe,SAAV,CAAoB,CAC3Bf,UAAUU,MADiB,EAE3BV,UAAUgB,MAFiB,CAApB,EAGNC,UA3CM;;AA6CT;;;;;;;;;;;;;AAaAC,oBAAgBlB,UAAUY,IA1DjB;;AA4DT;;;;;;;;;;;;;AAaAO,oBAAgBnB,UAAUY,IAzEjB;;AA2ET;;;AAGAQ,gBAAYpB,UAAUqB,MA9Eb;;AAgFT;;;AAGAC,WAAOtB,UAAUU,MAnFR;;AAqFT;;;AAGAa,WAAOvB,UAAUgB,MAAV,CAAiBC,UAxFf;;AA0FT;;;AAGAO,cAAUxB,UAAUgB,MA7FX;;AA+FT;;;AAGAS,cAAUzB,UAAUgB,MAlGX;;AAoGT;;;;;;AAMAU,cAAU1B,UAAUgB,MA1GX;;AA4GT;;;;;AAKAW,iBAAa3B,UAAU4B;AAjHd,GALgC;;AAyH3CC,UAAO,kBAAW;AAChB,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAM,IAAIC,KAAJ,CACJ,wDADI,CAAN;AAGD;AACD,WAAO,IAAP;AACD;AAhI0C,CAAlB,CAA3B;;AAmIAC,OAAOC,OAAP,GAAiBlC,oBAAjB","file":"FixedDataTableColumn.react.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableColumn.react\n * @typechecks\n */\n\nvar React = require('./React');\n\nvar PropTypes = React.PropTypes;\n\n/**\n * Component that defines the attributes of table column.\n */\nvar FixedDataTableColumn = React.createClass({displayName: \"FixedDataTableColumn\",\n  statics: {\n    __TableColumn__: true\n  },\n\n  propTypes: {\n    /**\n     * The horizontal alignment of the table cell content.\n     */\n    align: PropTypes.oneOf(['left', 'center', 'right']),\n\n    /**\n     * className for each of this column's data cells.\n     */\n    cellClassName: PropTypes.string,\n\n    /**\n     * The cell renderer that returns React-renderable content for table cell.\n     * ```\n     * function(\n     *   cellData: any,\n     *   cellDataKey: string,\n     *   rowData: object,\n     *   rowIndex: number,\n     *   columnData: any,\n     *   width: number\n     * ): ?$jsx\n     * ```\n     */\n    cellRenderer: PropTypes.func,\n\n    /**\n     * The getter `function(string_cellDataKey, object_rowData)` that returns\n     * the cell data for the `cellRenderer`.\n     * If not provided, the cell data will be collected from\n     * `rowData[cellDataKey]` instead. The value that `cellDataGetter` returns\n     * will be used to determine whether the cell should re-render.\n     */\n    cellDataGetter: PropTypes.func,\n\n    /**\n     * The key to retrieve the cell data from the data row. Provided key type\n     * must be either `string` or `number`. Since we use this\n     * for keys, it must be specified for each column.\n     */\n    dataKey: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]).isRequired,\n\n    /**\n     * The cell renderer that returns React-renderable content for table column\n     * header.\n     * ```\n     * function(\n     *   label: ?string,\n     *   cellDataKey: string,\n     *   columnData: any,\n     *   rowData: array<?object>,\n     *   width: number\n     * ): ?$jsx\n     * ```\n     */\n    headerRenderer: PropTypes.func,\n\n    /**\n     * The cell renderer that returns React-renderable content for table column\n     * footer.\n     * ```\n     * function(\n     *   label: ?string,\n     *   cellDataKey: string,\n     *   columnData: any,\n     *   rowData: array<?object>,\n     *   width: number\n     * ): ?$jsx\n     * ```\n     */\n    footerRenderer: PropTypes.func,\n\n    /**\n     * Bucket for any data to be passed into column renderer functions.\n     */\n    columnData: PropTypes.object,\n\n    /**\n     * The column's header label.\n     */\n    label: PropTypes.string,\n\n    /**\n     * The pixel width of the column.\n     */\n    width: PropTypes.number.isRequired,\n\n    /**\n     * If this is a resizable column this is its minimum pixel width.\n     */\n    minWidth: PropTypes.number,\n\n    /**\n     * If this is a resizable column this is its maximum pixel width.\n     */\n    maxWidth: PropTypes.number,\n\n    /**\n     * The grow factor relative to other columns. Same as the flex-grow API\n     * from http://www.w3.org/TR/css3-flexbox/. Basically, take any available\n     * extra width and distribute it proportionally according to all columns'\n     * flexGrow values. Defaults to zero (no-flexing).\n     */\n    flexGrow: PropTypes.number,\n\n    /**\n     * Whether the column can be resized with the\n     * FixedDataTableColumnResizeHandle. Please note that if a column\n     * has a flex grow, once you resize the column this will be set to 0.\n     */\n    isResizable: PropTypes.bool,\n  },\n\n  render:function() {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        'Component <FixedDataTableColumn /> should never render'\n      );\n    }\n    return null;\n  },\n});\n\nmodule.exports = FixedDataTableColumn;\n"]}