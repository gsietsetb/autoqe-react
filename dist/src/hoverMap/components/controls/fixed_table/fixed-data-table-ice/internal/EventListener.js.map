{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/EventListener.js"],"names":["emptyFunction","require","EventListener","listen","target","eventType","callback","addEventListener","remove","removeEventListener","attachEvent","detachEvent","capture","process","env","NODE_ENV","console","error","registerDefault","module","exports"],"mappings":";;AAAA;;;;;;;;;;;;AAYA,IAAIA,gBAAgBC,QAAQ,iBAAR,CAApB;;AAEA;;;;AAIA,IAAIC,gBAAgB;AAClB;;;;;;;;AAQAC,UAAQ,gBAASC,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsC;AAC5C,QAAIF,OAAOG,gBAAX,EAA6B;AAC3BH,aAAOG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,KAA7C;AACA,aAAO;AACLE,gBAAQ,kBAAW;AACjBJ,iBAAOK,mBAAP,CAA2BJ,SAA3B,EAAsCC,QAAtC,EAAgD,KAAhD;AACD;AAHI,OAAP;AAKD,KAPD,MAOO,IAAIF,OAAOM,WAAX,EAAwB;AAC7BN,aAAOM,WAAP,CAAmB,OAAOL,SAA1B,EAAqCC,QAArC;AACA,aAAO;AACLE,gBAAQ,kBAAW;AACjBJ,iBAAOO,WAAP,CAAmB,OAAON,SAA1B,EAAqCC,QAArC;AACD;AAHI,OAAP;AAKD;AACF,GAzBiB;;AA2BlB;;;;;;;;AAQAM,WAAS,iBAASR,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsC;AAC7C,QAAI,CAACF,OAAOG,gBAAZ,EAA8B;AAC5B,UAAIM,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,gBAAQC,KAAR,CACE,iEACA,oEADA,GAEA,+BAHF;AAKD;AACD,aAAO;AACLT,gBAAQR;AADH,OAAP;AAGD,KAXD,MAWO;AACLI,aAAOG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,IAA7C;AACA,aAAO;AACLE,gBAAQ,kBAAW;AACjBJ,iBAAOK,mBAAP,CAA2BJ,SAA3B,EAAsCC,QAAtC,EAAgD,IAAhD;AACD;AAHI,OAAP;AAKD;AACF,GAvDiB;;AAyDlBY,mBAAiB,2BAAW,CAAE;AAzDZ,CAApB;;AA4DAC,OAAOC,OAAP,GAAiBlB,aAAjB","file":"EventListener.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventListener\n * @typechecks\n */\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent('on' + eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function(target, eventType, callback) {\n    if (!target.addEventListener) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(\n          'Attempted to listen to events during the capture phase on a ' +\n          'browser that does not support the capture phase. Your application ' +\n          'will not receive some events.'\n        );\n      }\n      return {\n        remove: emptyFunction\n      };\n    } else {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    }\n  },\n\n  registerDefault: function() {}\n};\n\nmodule.exports = EventListener;\n"]}