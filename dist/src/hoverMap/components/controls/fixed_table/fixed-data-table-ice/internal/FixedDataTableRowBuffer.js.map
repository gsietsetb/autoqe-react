{"version":3,"sources":["../../../../../../../../src/hoverMap/components/controls/fixed_table/fixed-data-table-ice/internal/FixedDataTableRowBuffer.js"],"names":["IntegerBufferSet","require","clamp","invariant","MIN_BUFFER_ROWS","MAX_BUFFER_ROWS","FixedDataTableRowBuffer","rowsCount","defaultRowHeight","viewportHeight","rowHeightGetter","$FixedDataTableRowBuffer_bufferSet","$FixedDataTableRowBuffer_defaultRowHeight","$FixedDataTableRowBuffer_viewportRowsBegin","$FixedDataTableRowBuffer_viewportRowsEnd","$FixedDataTableRowBuffer_maxVisibleRowCount","Math","ceil","$FixedDataTableRowBuffer_bufferRowsCount","floor","$FixedDataTableRowBuffer_rowsCount","$FixedDataTableRowBuffer_rowHeightGetter","$FixedDataTableRowBuffer_rows","$FixedDataTableRowBuffer_viewportHeight","getRows","bind","getRowsWithUpdatedBuffer","prototype","remainingBufferRows","bufferRowIndex","max","$FixedDataTableRowBuffer_addRowToBuffer","firstRowIndex","firstRowOffset","$FixedDataTableRowBuffer_hideAllRows","top","totalHeight","rowIndex","endIndex","min","offsetTop","firstViewportRowIndex","lastViewportRowIndex","rowPosition","getValuePosition","viewportRowsCount","allowedRowsCount","getSize","replaceFurthestValuePosition","getNewPositionForValue","i","length","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,mBAAmBC,QAAQ,oBAAR,CAAvB;;AAEA,IAAIC,QAAQD,QAAQ,SAAR,CAAZ;AACA,IAAIE,YAAYF,QAAQ,aAAR,CAAhB;AACA,IAAIG,kBAAkB,CAAtB;AACA,IAAIC,kBAAkB,EAAtB;;AAEA;AACA;AACA;;AAEE,SAASC,uBAAT,CACFC,SADE;AAEE,UAAYC,gBAFd;AAGE,UAAWC,cAHb;AAIE,aAAcC,eAJhB,EAKC;AACCP,YACEK,qBAAqB,CADvB,EAEE,+DAFF;;AAKA,OAAKG,kCAAL,GAA0C,IAAIX,gBAAJ,EAA1C;AACA,OAAKY,yCAAL,GAAiDJ,gBAAjD;AACA,OAAKK,0CAAL,GAAkD,CAAlD;AACA,OAAKC,wCAAL,GAAgD,CAAhD;AACA,OAAKC,2CAAL,GAAmDC,KAAKC,IAAL,CAAUR,iBAAiBD,gBAA3B,IAA+C,CAAlG;AACA,OAAKU,wCAAL,GAAgDhB,MAC9CE,eAD8C,EAE9CY,KAAKG,KAAL,CAAW,KAAKJ,2CAAL,GAAiD,CAA5D,CAF8C,EAG9CV,eAH8C,CAAhD;AAKA,OAAKe,kCAAL,GAA0Cb,SAA1C;AACA,OAAKc,wCAAL,GAAgDX,eAAhD;AACA,OAAKY,6BAAL,GAAqC,EAArC;AACA,OAAKC,uCAAL,GAA+Cd,cAA/C;;AAEA,OAAKe,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,OAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BD,IAA9B,CAAmC,IAAnC,CAAhC;AACD;;AAEDnB,wBAAwBqB,SAAxB,CAAkCD,wBAAlC,GAA2D,YAAY;AACrE,MAAIE,sBAAsB,IAAI,KAAKV,wCAAnC;AACA,MAAIW,iBACFb,KAAKc,GAAL,CAAS,KAAKjB,0CAAL,GAAkD,KAAKK,wCAAhE,EAA0G,CAA1G,CADF;AAEA,SAAOW,iBAAiB,KAAKhB,0CAA7B,EAAyE;AACvE,SAAKkB,uCAAL,CACEF,cADF,EAEE,KAAKN,uCAFP,EAGE,KAAKV,0CAHP,EAIE,KAAKC,wCAAL,GAA+C,CAJjD;AAMAe;AACAD;AACD;AACDC,mBAAiB,KAAKf,wCAAtB;AACA,SAAOe,iBAAiB,KAAKT,kCAAtB,IAA4DQ,sBAAsB,CAAzF,EAA4F;AAC1F,SAAKG,uCAAL,CACEF,cADF,EAEE,KAAKN,uCAFP,EAGE,KAAKV,0CAHP,EAIE,KAAKC,wCAAL,GAA+C,CAJjD;AAMAe;AACAD;AACD;AACD,SAAO,KAAKN,6BAAZ;AACD,CA1BD;;AA4BAhB,wBAAwBqB,SAAxB,CAAkCH,OAAlC,GAA0C,UAC5CQ,aAD4C;AAExC,UAAWC,cAF6B,EAGxC;AACA;AACA;AACA,OAAKC,oCAAL;;AAEA,MAAIC,MAAMF,cAAV;AACA,MAAIG,cAAcD,GAAlB;AACA,MAAIE,WAAWL,aAAf;AACA,MAAIM,WACFtB,KAAKuB,GAAL,CAASP,gBAAgB,KAAKjB,2CAA9B,EAA2E,KAAKK,kCAAhF,CADF;;AAGA,OAAKP,0CAAL,GAAkDmB,aAAlD;AACA,SAAOK,WAAWC,QAAX,IACFF,cAAc,KAAKb,uCAAnB,IAA8Dc,WAAW,KAAKjB,kCADnF,EACwH;AACtH,SAAKW,uCAAL,CACEM,QADF,EAEED,WAFF,EAGEJ,aAHF,EAIEM,WAAW,CAJb;AAMAF,mBAAe,KAAKf,wCAAL,CAA8CgB,QAA9C,CAAf;AACA,MAAEA,QAAF;AACA;AACA;AACA,SAAKvB,wCAAL,GAAgDuB,QAAhD;AACD;;AAED,SAAO,KAAKf,6BAAZ;AACD,CA/BD;;AAiCAhB,wBAAwBqB,SAAxB,CAAkCI,uCAAlC,GAA0E,UAC5EM,QAD4E;AAExE,UAAWG,SAF6D;AAGxE,UAAWC,qBAH6D;AAIxE,UAAWC,oBAJ6D,EAKzE;AACG,MAAIC,cAAc,KAAKhC,kCAAL,CAAwCiC,gBAAxC,CAAyDP,QAAzD,CAAlB;AACA,MAAIQ,oBAAoBH,uBAAuBD,qBAAvB,GAA+C,CAAvE;AACA,MAAIK,mBAAmBD,oBAAoB,KAAK3B,wCAAL,GAAgD,CAA3F;AACA,MAAIyB,gBAAgB,IAAhB,IACA,KAAKhC,kCAAL,CAAwCoC,OAAxC,MAAqDD,gBADzD,EAC2E;AACzEH,kBACE,KAAKhC,kCAAL,CAAwCqC,4BAAxC,CACEP,qBADF,EAEEC,oBAFF,EAGEL,QAHF,CADF;AAMD;AACD,MAAIM,gBAAgB,IAApB,EAA0B;AACxB;AACA;AACAA,kBAAc,KAAKhC,kCAAL,CAAwCsC,sBAAxC,CAA+DZ,QAA/D,CAAd;AACA,SAAKf,6BAAL,CAAmCqB,WAAnC,IAAkD;AAChDN,gBAASA,QADuC;AAEhDG,iBAAUA;AAFsC,KAAlD;AAID,GARD,MAQO;AACL;AACA;AACA,SAAKlB,6BAAL,CAAmCqB,WAAnC,EAAgDN,QAAhD,GAA2DA,QAA3D;AACA,SAAKf,6BAAL,CAAmCqB,WAAnC,EAAgDH,SAAhD,GAA4DA,SAA5D;AACD;AACJ,CAhCD;;AAkCAlC,wBAAwBqB,SAAxB,CAAkCO,oCAAlC,GAAuE,YAAW;AAChF,MAAIgB,IAAI,KAAK5B,6BAAL,CAAmC6B,MAAnC,GAA4C,CAApD;AACA,SAAOD,IAAI,CAAC,CAAZ,EAAe;AACb,SAAK5B,6BAAL,CAAmC4B,CAAnC,EAAsCV,SAAtC,GAAkD,KAAKjB,uCAAvD;AACA2B;AACD;AACF,CAND;;AASFE,OAAOC,OAAP,GAAiB/C,uBAAjB","file":"FixedDataTableRowBuffer.js","sourcesContent":["/**\n * Copyright (c) 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FixedDataTableRowBuffer\n * @typechecks\n */\n'use strict';\n\nvar IntegerBufferSet = require('./IntegerBufferSet');\n\nvar clamp = require('./clamp');\nvar invariant = require('./invariant');\nvar MIN_BUFFER_ROWS = 5;\nvar MAX_BUFFER_ROWS = 15;\n\n// FixedDataTableRowBuffer is a helper class that executes row buffering\n// logic for FixedDataTable. It figures out which rows should be rendered\n// and in which positions.\n\n  function FixedDataTableRowBuffer(\nrowsCount,\n    /*number*/  defaultRowHeight,\n    /*number*/ viewportHeight,\n    /*?function*/ rowHeightGetter)\n   {\n    invariant(\n      defaultRowHeight !== 0,\n      \"defaultRowHeight musn't be equal 0 in FixedDataTableRowBuffer\"\n    );\n\n    this.$FixedDataTableRowBuffer_bufferSet = new IntegerBufferSet();\n    this.$FixedDataTableRowBuffer_defaultRowHeight = defaultRowHeight;\n    this.$FixedDataTableRowBuffer_viewportRowsBegin = 0;\n    this.$FixedDataTableRowBuffer_viewportRowsEnd = 0;\n    this.$FixedDataTableRowBuffer_maxVisibleRowCount = Math.ceil(viewportHeight / defaultRowHeight) + 1;\n    this.$FixedDataTableRowBuffer_bufferRowsCount = clamp(\n      MIN_BUFFER_ROWS,\n      Math.floor(this.$FixedDataTableRowBuffer_maxVisibleRowCount/2),\n      MAX_BUFFER_ROWS\n    );\n    this.$FixedDataTableRowBuffer_rowsCount = rowsCount;\n    this.$FixedDataTableRowBuffer_rowHeightGetter = rowHeightGetter;\n    this.$FixedDataTableRowBuffer_rows = [];\n    this.$FixedDataTableRowBuffer_viewportHeight = viewportHeight;\n\n    this.getRows = this.getRows.bind(this);\n    this.getRowsWithUpdatedBuffer = this.getRowsWithUpdatedBuffer.bind(this);\n  }\n\n  FixedDataTableRowBuffer.prototype.getRowsWithUpdatedBuffer=function()  {\n    var remainingBufferRows = 2 * this.$FixedDataTableRowBuffer_bufferRowsCount;\n    var bufferRowIndex =\n      Math.max(this.$FixedDataTableRowBuffer_viewportRowsBegin - this.$FixedDataTableRowBuffer_bufferRowsCount, 0);\n    while (bufferRowIndex < this.$FixedDataTableRowBuffer_viewportRowsBegin) {\n      this.$FixedDataTableRowBuffer_addRowToBuffer(\n        bufferRowIndex,\n        this.$FixedDataTableRowBuffer_viewportHeight,\n        this.$FixedDataTableRowBuffer_viewportRowsBegin,\n        this.$FixedDataTableRowBuffer_viewportRowsEnd -1\n      );\n      bufferRowIndex++;\n      remainingBufferRows--;\n    }\n    bufferRowIndex = this.$FixedDataTableRowBuffer_viewportRowsEnd;\n    while (bufferRowIndex < this.$FixedDataTableRowBuffer_rowsCount && remainingBufferRows > 0) {\n      this.$FixedDataTableRowBuffer_addRowToBuffer(\n        bufferRowIndex,\n        this.$FixedDataTableRowBuffer_viewportHeight,\n        this.$FixedDataTableRowBuffer_viewportRowsBegin,\n        this.$FixedDataTableRowBuffer_viewportRowsEnd -1\n      );\n      bufferRowIndex++;\n      remainingBufferRows--;\n    }\n    return this.$FixedDataTableRowBuffer_rows;\n  };\n\n  FixedDataTableRowBuffer.prototype.getRows=function(\nfirstRowIndex,\n    /*number*/ firstRowOffset)\n    {\n    // Update offsets of all rows to move them outside of viewport. Later we\n    // will bring rows that we should show to their right offsets.\n    this.$FixedDataTableRowBuffer_hideAllRows();\n\n    var top = firstRowOffset;\n    var totalHeight = top;\n    var rowIndex = firstRowIndex;\n    var endIndex =\n      Math.min(firstRowIndex + this.$FixedDataTableRowBuffer_maxVisibleRowCount, this.$FixedDataTableRowBuffer_rowsCount);\n\n    this.$FixedDataTableRowBuffer_viewportRowsBegin = firstRowIndex;\n    while (rowIndex < endIndex ||\n        (totalHeight < this.$FixedDataTableRowBuffer_viewportHeight && rowIndex < this.$FixedDataTableRowBuffer_rowsCount)) {\n      this.$FixedDataTableRowBuffer_addRowToBuffer(\n        rowIndex,\n        totalHeight,\n        firstRowIndex,\n        endIndex - 1\n      );\n      totalHeight += this.$FixedDataTableRowBuffer_rowHeightGetter(rowIndex);\n      ++rowIndex;\n      // Store index after the last viewport row as end, to be able to\n      // distinguish when there are no rows rendered in viewport\n      this.$FixedDataTableRowBuffer_viewportRowsEnd = rowIndex;\n    }\n\n    return this.$FixedDataTableRowBuffer_rows;\n  };\n\n  FixedDataTableRowBuffer.prototype.$FixedDataTableRowBuffer_addRowToBuffer=function(\nrowIndex,\n    /*number*/ offsetTop,\n    /*number*/ firstViewportRowIndex,\n    /*number*/ lastViewportRowIndex)\n   {\n      var rowPosition = this.$FixedDataTableRowBuffer_bufferSet.getValuePosition(rowIndex);\n      var viewportRowsCount = lastViewportRowIndex - firstViewportRowIndex + 1;\n      var allowedRowsCount = viewportRowsCount + this.$FixedDataTableRowBuffer_bufferRowsCount * 2;\n      if (rowPosition === null &&\n          this.$FixedDataTableRowBuffer_bufferSet.getSize() >= allowedRowsCount) {\n        rowPosition =\n          this.$FixedDataTableRowBuffer_bufferSet.replaceFurthestValuePosition(\n            firstViewportRowIndex,\n            lastViewportRowIndex,\n            rowIndex\n          );\n      }\n      if (rowPosition === null) {\n        // We can't reuse any of existing positions for this row. We have to\n        // create new position\n        rowPosition = this.$FixedDataTableRowBuffer_bufferSet.getNewPositionForValue(rowIndex);\n        this.$FixedDataTableRowBuffer_rows[rowPosition] = {\n          rowIndex:rowIndex,\n          offsetTop:offsetTop,\n        };\n      } else {\n        // This row already is in the table with rowPosition position or it\n        // can replace row that is in that position\n        this.$FixedDataTableRowBuffer_rows[rowPosition].rowIndex = rowIndex;\n        this.$FixedDataTableRowBuffer_rows[rowPosition].offsetTop = offsetTop;\n      }\n  };\n\n  FixedDataTableRowBuffer.prototype.$FixedDataTableRowBuffer_hideAllRows=function() {\n    var i = this.$FixedDataTableRowBuffer_rows.length - 1;\n    while (i > -1) {\n      this.$FixedDataTableRowBuffer_rows[i].offsetTop = this.$FixedDataTableRowBuffer_viewportHeight;\n      i--;\n    }\n  };\n\n\nmodule.exports = FixedDataTableRowBuffer;\n"]}