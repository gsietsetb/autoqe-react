{"version":3,"sources":["../../../../../../src/hoverMap/components/examples/data/gen_markers_data.js"],"names":["genMarkersData","K_PITER_LAT_LNG","lat","lng","imageRndUrl","width","height","categories","category","random","number","max","length","index","nLikeRnd","K_N","sum","i","precision","count","seedNumber","seed","latVarM","lngVarM","test","typeGetter","K_P_COUNT","paragraphs","Range","map","lorem","paragraph","toList","toJS","markersData","Map","id","title","company","companyName","toUpperCase","description","address","streetAddress","image","type","push"],"mappings":"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","file":"gen_markers_data.js","sourcesContent":["import immutable from 'immutable';\n\n// really really nice but big size library\nimport {seed} from 'faker/vendor/mersenne.js';\nimport faker from 'faker';\n\n\nconst K_PITER_LAT_LNG = {lat: 59.938043, lng: 30.337157};\n\nfunction imageRndUrl(width = 100, height = 75) {\n  const categories = ['abstract', 'animals', 'business', 'cats', 'city', 'food', 'nightlife', 'fashion', 'people', 'nature', 'sports', 'technics', 'transport'];\n  const category = categories[faker.random.number({max: categories.length - 1})];\n  const index = 1 + faker.random.number({max: 8});\n  return `http://lorempixel.com/${width}/${height}/${category}/${index}/`;\n}\n\n// something like normal distribution around 0.5\nfunction nLikeRnd() {\n  const K_N = 10;\n  let sum = 0;\n  for (let i = 0; i < K_N; ++i) {\n    sum += faker.random.number({max: 1, precision: 0.0001});\n  }\n\n  return sum / K_N;\n}\n\nexport default function genMarkersData({count, seed: seedNumber, latVarM, lngVarM, test, typeGetter}) {\n  seed(seedNumber);\n  const K_P_COUNT = 10;\n  const paragraphs = new immutable.Range(0, K_P_COUNT)\n    .map(() => faker.lorem.paragraph())\n    .toList()\n    .toJS();\n\n  let markersData = new immutable\n    .Range(0, count)\n    .map(i => new immutable.Map({\n      id: 'uuid_' + i,\n      lat: K_PITER_LAT_LNG.lat + (latVarM || 1.5) * (nLikeRnd() - 0.5),\n      lng: K_PITER_LAT_LNG.lng + (lngVarM || 1.5) * (nLikeRnd() - 0.5),\n      title: faker.company.companyName().toUpperCase(),\n      description: paragraphs[i % K_P_COUNT],\n      address: faker.address.streetAddress(),\n      image: imageRndUrl(),\n      type: (typeGetter ? typeGetter(i) : i % 2), // i % 4,\n      number: `${20 + i}$`\n    }))\n    .toList(); // we need List not Seq\n\n  if (test) {\n    markersData = markersData\n      .push(new immutable.Map({ // this marker i use to test positioning https://www.dropbox.com/s/oybq1nvogjfstlj/Screenshot%202015-05-06%2017.46.32.png?dl=0\n        id: 'red selo',\n        lat: 59.724465,\n        lng: 30.080121,\n        title: 'KRASNOYE SELO CIRCLE',\n        description: 'circle',\n        address: 'circle',\n        image: imageRndUrl(),\n        type: 0,\n        number: '500$'\n      }))\n      .push(new immutable.Map({\n        id: 'alaska',\n        lat: 65.670915,\n        lng: -153.093992,\n        title: 'ALASKA',\n        description: 'alaska',\n        address: 'alaska',\n        image: imageRndUrl(),\n        type: 0,\n        number: '501$'\n      }));\n  }\n\n  return markersData;\n}\n"]}