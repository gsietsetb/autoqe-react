{"version":3,"sources":["../../../../../../src/hoverMap/components/examples/helpers/calc_markers_visibility.js"],"names":["getScale","getRealFromTo","K_SCALE_SMALL","K_SCALE_MEDIUM","K_BEFORE_AFTER_SCALES","l","scale","K_SCALES_SUM","reduce","sum","el","rowIndex","rowFrom","rowTo","K_SCALE_NORMAL","length","deltaS","index","_getRealFromTo","maxVisibleRows","totalSize","addFrom","dadd","addTo","Math","max","min","current","result"],"mappings":";;;;;QAagBA,Q,GAAAA,Q;QAgDAC,a,GAAAA,a;AA7DhB;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAMC,gBAAgB,GAAtB;AACA,IAAMC,iBAAiB,IAAvB;AACA,IAAMC,wBAAwB,CAAC,EAACC,GAAG,EAAJ,EAAQC,OAAOJ,aAAf,EAAD,EAAgC,EAACG,GAAG,EAAJ,EAAQC,OAAOH,cAAf,EAAhC,CAA9B;AACA,IAAMI,eAAeH,sBAAsBI,MAAtB,CAA6B,UAACC,GAAD,EAAMC,EAAN;AAAA,SAAaA,GAAGL,CAAH,GAAOI,GAApB;AAAA,CAA7B,EAAsD,CAAtD,CAArB;;AAGO,SAAST,QAAT,CAAkBW,QAAlB,EAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,cAA5C,EAA4D;AACjE,MAAIH,YAAYC,OAAZ,IAAuBD,YAAYE,KAAvC,EAA8C;AAC5C,WAAOC,cAAP;AACD;;AAED,MAAIV,sBAAsBW,MAA1B,EAAkC;AAChC,QAAIJ,WAAWC,OAAf,EAAwB;AACtB,UAAII,SAASJ,OAAb;AACA,WAAK,IAAIK,QAAQb,sBAAsBW,MAAtB,GAA+B,CAAhD,EAAmDE,SAAS,CAA5D,EAA+D,EAAEA,KAAjE,EAAwE;AACtED,kBAAUZ,sBAAsBa,KAAtB,EAA6BZ,CAAvC;AACA,YAAIM,YAAYK,MAAhB,EAAwB;AACtB,iBAAOZ,sBAAsBa,KAAtB,EAA6BX,KAApC;AACD;AACF;;AAED;AACA,aAAOF,sBAAsB,CAAtB,EAAyBE,KAAhC;AACD;;AAED,QAAIK,WAAWE,KAAf,EAAsB;AACpB,UAAIG,UAASH,KAAb;AACA,WAAK,IAAII,SAAQb,sBAAsBW,MAAtB,GAA+B,CAAhD,EAAmDE,UAAS,CAA5D,EAA+D,EAAEA,MAAjE,EAAwE;AACtED,mBAAUZ,sBAAsBa,MAAtB,EAA6BZ,CAAvC;AACA,YAAIM,YAAYK,OAAhB,EAAwB;AACtB,iBAAOZ,sBAAsBa,MAAtB,EAA6BX,KAApC;AACD;AACF;;AAED;AACA,aAAOF,sBAAsB,CAAtB,EAAyBE,KAAhC;AACD;AACF;AACD,SAAOQ,cAAP;AACD;;AAED;AACA,SAASI,cAAT,CAAwBN,OAAxB,EAAiCC,KAAjC,EAAwCM,cAAxC,EAAwDC,SAAxD,EAAmE;AACjE,MAAIC,UAAYT,UAAUO,cAAV,GAA2BZ,YAA5B,GAA6Ca,YAAY,CAA1D,GAAkER,UAAUO,cAAV,GAA2BZ,YAA5B,IAA6Ca,YAAY,CAAzD,CAAjE,GAAgI,CAA9I;;AAEA,MAAME,OAAOf,eAAeK,OAA5B;AACA,MAAIW,QAAQD,QAAQ,CAAR,GAAYA,IAAZ,GAAmB,CAA/B;;AAEA,SAAO;AACLV,aAASY,KAAKC,GAAL,CAAS,CAAT,EAAYb,UAAUL,YAAV,GAAyBc,OAArC,CADJ;AAELR,WAAOW,KAAKE,GAAL,CAASN,YAAY,CAArB,EAAwBR,UAAUO,cAAV,GAA2BZ,YAA3B,GAA0CgB,KAAlE;AAFF,GAAP;AAID;;AAEM,SAAStB,aAAT,CAAuBW,OAAvB,EAAgCC,KAAhC,EAAuCM,cAAvC,EAAuDC,SAAvD,EAAkE;AACvE,MAAMO,UAAUT,eAAeN,OAAf,EAAwBC,KAAxB,EAA+BM,cAA/B,EAA+CC,SAA/C,CAAhB;;AAEA,MAAMQ,SAAS;AACbhB,aAASe,QAAQf,OADJ;AAEbC,WAAOc,QAAQd;AAFF,GAAf;;AAKA,SAAOe,MAAP;AACD","file":"calc_markers_visibility.js","sourcesContent":["// import {K_SCALE_NORMAL} from 'components/markers/map_marker.jsx';\n// import invariant from 'fixed-data-table-ice/internal/invariant.js';\n\n// {l: 10, scale: 0.3}, {l: 5, scale: 0.4} - означает\n// 10 элементов размера 0.3, потом 5 размера 0.4, потом те что видны в табличке обычного размера\n// потом снова потом 5 размера 0.4, и 10 элементов размера 0.3\n// если поставить пусто то на карте будут видны тока те что на экране\nconst K_SCALE_SMALL = 0.3;\nconst K_SCALE_MEDIUM = 0.45;\nconst K_BEFORE_AFTER_SCALES = [{l: 15, scale: K_SCALE_SMALL}, {l: 10, scale: K_SCALE_MEDIUM}];\nconst K_SCALES_SUM = K_BEFORE_AFTER_SCALES.reduce((sum, el) => el.l + sum, 0);\n\n\nexport function getScale(rowIndex, rowFrom, rowTo, K_SCALE_NORMAL) {\n  if (rowIndex >= rowFrom && rowIndex <= rowTo) {\n    return K_SCALE_NORMAL;\n  }\n\n  if (K_BEFORE_AFTER_SCALES.length) {\n    if (rowIndex < rowFrom) {\n      let deltaS = rowFrom;\n      for (let index = K_BEFORE_AFTER_SCALES.length - 1; index >= 0; --index) {\n        deltaS -= K_BEFORE_AFTER_SCALES[index].l;\n        if (rowIndex >= deltaS) {\n          return K_BEFORE_AFTER_SCALES[index].scale;\n        }\n      }\n\n      // yes, the code can be here (dirty calculus)\n      return K_BEFORE_AFTER_SCALES[0].scale;\n    }\n\n    if (rowIndex > rowTo) {\n      let deltaS = rowTo;\n      for (let index = K_BEFORE_AFTER_SCALES.length - 1; index >= 0; --index) {\n        deltaS += K_BEFORE_AFTER_SCALES[index].l;\n        if (rowIndex <= deltaS) {\n          return K_BEFORE_AFTER_SCALES[index].scale;\n        }\n      }\n\n      // yes, the code can be here (dirty calculus)\n      return K_BEFORE_AFTER_SCALES[0].scale;\n    }\n  }\n  return K_SCALE_NORMAL;\n}\n\n// this calculations is not precise (dirty)\nfunction _getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize) {\n  let addFrom = ((rowFrom + maxVisibleRows + K_SCALES_SUM) > (totalSize - 1)) ? ((rowFrom + maxVisibleRows + K_SCALES_SUM) - (totalSize - 1)) : 0;\n\n  const dadd = K_SCALES_SUM - rowFrom;\n  let addTo = dadd >= 0 ? dadd : 0;\n\n  return {\n    rowFrom: Math.max(0, rowFrom - K_SCALES_SUM - addFrom),\n    rowTo: Math.min(totalSize - 1, rowFrom + maxVisibleRows + K_SCALES_SUM + addTo)\n  };\n}\n\nexport function getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize) {\n  const current = _getRealFromTo(rowFrom, rowTo, maxVisibleRows, totalSize);\n\n  const result = {\n    rowFrom: current.rowFrom,\n    rowTo: current.rowTo\n  };\n\n  return result;\n}\n\n"]}