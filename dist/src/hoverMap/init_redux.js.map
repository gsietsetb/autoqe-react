{"version":3,"sources":["../../../src/hoverMap/init_redux.js"],"names":["initRedux","stores","store","initialState","serverPath","userRoutesActions","Promise","resolve","reject","gotoRoute","router","isServerCall","undefined","routePathes","initialRouteDispatch","dispatcher","getState","wait","action","type","url","redux","dispatchResult","dispatch","changeRoute","then","Error","err"],"mappings":";;;;;kBAiBwBA,S;;AAjBxB;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;IAAYC,M;;;;;;AAEZ,IAAMC,QAAQ,0BAAcD,MAAd,CAAd;;AAEe,SAASD,SAAT,OAAkE;AAAA,MAA9CG,YAA8C,QAA9CA,YAA8C;AAAA,MAAhCC,UAAgC,QAAhCA,UAAgC;AAAA,MAApBC,iBAAoB,QAApBA,iBAAoB;;AAC/E,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,8BACV,qCAAmBJ,UAAnB,CADU;AAAA,QAC/BK,SAD+B,uBAC/BA,SAD+B;AAAA,QACpBC,MADoB,uBACpBA,MADoB;;AAGtC,QAAMC,eAAeP,eAAeQ,SAAf,IAA4BR,eAAe,IAAhE;AACA,QAAMS,cAAc,sBAAKR,iBAAL,mBAApB;AACA,QAAMS,uBAAuB,CAACX,YAAD,IAAiBQ,YAA9C,CALsC,CAKsB;;AAE5D;AACA,QAAMI,aAAa,6BACjBb,KADiB,EAEjB;AAAA,aAAY,CACV,qBAAgBc,QAAhB,CADU,EAEV,uCAAsB,EAACC,MAAMN,YAAP,EAAtB,CAFU,EAEmC;AAC7C,yCAHU,EAIV,kCAAiB;AAAA,eAAWO,UAAUA,OAAOC,IAAP,mCAAV,IAAyCV,UAAUS,OAAOE,GAAjB,CAApD;AAAA,OAAjB,CAJU,CAImF;AAJnF,OAAZ;AAAA,KAFiB,CAAnB;;AAUA,QAAMC,QAAQ,wBAAYN,UAAZ,EAAwBZ,YAAxB,CAAd;;AAEA;AACAO,WAAOG,WAAP,EAAoBC,oBAApB,EAA0C,YAAa;AACrD,UAAMQ,iBAAiBD,MAAME,QAAN,CAAelB,kBAAkBmB,WAAlB,oCAAf,CAAvB;AACA;AACA,UAAIb,YAAJ,EAAkB;AAChB,YAAI,CAACW,cAAD,IAAmB,CAAC,sBAAWA,eAAeG,IAA1B,CAAxB,EAAyD;AACvDjB,iBAAO,IAAIkB,KAAJ,CAAU,0CAAV,CAAP;AACD;;AAED,YAAIJ,kBAAkB,sBAAWA,eAAeG,IAA1B,CAAtB,EAAuD;AACrDH,yBAAeG,IAAf,CACE;AAAA,mBAAMlB,QAAQc,KAAR,CAAN;AAAA,WADF,EACwB;AACtB;AAAA,mBAAOb,OAAOmB,GAAP,CAAP;AAAA,WAFF;AAID;AACF;AACF,KAfD;;AAiBA,QAAI,CAAChB,YAAL,EAAmB;AACjBJ,cAAQc,KAAR;AACD;AACF,GAzCM,CAAP;AA0CD","file":"init_redux.js","sourcesContent":["import pick from 'lodash.pick';\nimport isString from 'lodash.isstring';\nimport isFunction from 'lodash.isfunction';\n\nimport {createRedux, createDispatcher, composeStores} from 'redux';\nimport thunkMiddleware from 'redux/lib/middleware/thunk';\n\nimport multiActionMiddleware from 'middlewares/multi_action_middleware.js';\nimport callFnMiddleware from 'middlewares/call_fn_middleware.js';\nimport promiseMiddleware from 'middlewares/promise_middleware';\n\nimport createPageJsRouter from 'utils/pagejs/create_page_js_router.js';\nimport {SWITCH_LINK} from 'consts/link_action_types.js';\nimport * as stores from 'stores/index';\n\nconst store = composeStores(stores);\n\nexport default function initRedux({initialState, serverPath, userRoutesActions}) {\n  return new Promise((resolve, reject) => {\n    const {gotoRoute, router} = createPageJsRouter(serverPath);\n\n    const isServerCall = serverPath !== undefined && serverPath !== null;\n    const routePathes = pick(userRoutesActions, isString);\n    const initialRouteDispatch = !initialState || isServerCall; // call or not initial route\n\n    // Create a Dispatcher function for your composite Store:\n    const dispatcher = createDispatcher(\n      store,\n      getState => [\n        thunkMiddleware(getState),\n        multiActionMiddleware({wait: isServerCall}), // wait multiple actions to complete or not\n        promiseMiddleware(),\n        callFnMiddleware(action => (action && action.type === SWITCH_LINK && gotoRoute(action.url))) // helper for <Link /> component\n      ]\n    );\n\n    const redux = createRedux(dispatcher, initialState);\n\n    // bind route changes on changeRoute action\n    router(routePathes, initialRouteDispatch, (...args) => {\n      const dispatchResult = redux.dispatch(userRoutesActions.changeRoute(...args));\n      // resolve on server after all actions in userRoutesActions.changeRoute resolved\n      if (isServerCall) {\n        if (!dispatchResult || !isFunction(dispatchResult.then)) {\n          reject(new Error('dispatchResult must be promise on server'));\n        }\n\n        if (dispatchResult && isFunction(dispatchResult.then)) {\n          dispatchResult.then(\n            () => resolve(redux), // result is'n needed it's just to be sure all actions done\n            err => reject(err)\n          );\n        }\n      }\n    });\n\n    if (!isServerCall) {\n      resolve(redux);\n    }\n  });\n}\n"]}