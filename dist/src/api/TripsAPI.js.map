{"version":3,"sources":["../../../src/api/TripsAPI.js"],"names":["types","API_URL","TripsAPI","Promise","resolve","reject","get","end","err","resp","JSON","parse","text","trip","headers","Object","assign","requestHeaders","request","Request","id","method","body","stringify","fetch","then","response","json","catch","error"],"mappings":";;;;;;;;AAAA;;;;AACA;;IAAYA,K;;;;;;;;AAEZ,IAAMC,UAAUD,MAAMC,OAAN,GAAc,YAA9B;;IAEqBC,Q;;;;;;;yCAEO;AACpB;AACH;;;sCAEoB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,iCACKC,GADL,CACSL,OADT,EAEKM,GAFL,CAES,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChB,wBAAID,GAAJ,EAASH,OAAOG,GAAP;AACTJ,4BAAQM,KAAKC,KAAL,CAAWF,KAAKG,IAAhB,CAAR;AACH,iBALL;AAMH,aAPM,CAAP;;AASA;AACA;AACA;AACA;AACA;AACH;;;mCAEiBC,I,EAAM;AACpB,gBAAMC,UAAUC,OAAOC,MAAP,CAAc,EAAC,gBAAgB,kBAAjB,EAAd,EAAoD,KAAKC,cAAL,EAApD,CAAhB;AACA,gBAAMC,UAAU,IAAIC,OAAJ,CAAYlB,UAAQY,KAAKO,EAAzB,EAA6B;AACzCC,wBAAQ,KADiC;AAEzCP,yBAASA,OAFgC;AAGzCQ,sBAAMZ,KAAKa,SAAL,CAAe,EAACV,MAAMA,IAAP,EAAf;AAHmC,aAA7B,CAAhB;;AAOA,mBAAOW,MAAMN,OAAN,EAAeO,IAAf,CAAoB,oBAAY;AACnC,uBAAOC,SAASC,IAAT,EAAP;AACH,aAFM,EAEJC,KAFI,CAEE,iBAAS;AACd,uBAAOC,KAAP;AACH,aAJM,CAAP;AAKH;;;mCAEiBhB,I,EAAM;AACpB,gBAAMC,UAAUC,OAAOC,MAAP,CAAc,EAAC,gBAAgB,kBAAjB,EAAd,EAAoD,KAAKC,cAAL,EAApD,CAAhB;AACA,gBAAMC,UAAU,IAAIC,OAAJ,CAAYlB,OAAZ,EAAqB;AACjCoB,wBAAQ,MADyB;AAEjCP,yBAASA,OAFwB;AAGjCQ,sBAAMZ,KAAKa,SAAL,CAAe,EAACV,MAAMA,IAAP,EAAf;AAH2B,aAArB,CAAhB;;AAOA,mBAAOW,MAAMN,OAAN,EAAeO,IAAf,CAAoB,oBAAY;AACnC,uBAAOC,SAASC,IAAT,EAAP;AACH,aAFM,EAEJC,KAFI,CAEE,iBAAS;AACd,uBAAOC,KAAP;AACH,aAJM,CAAP;AAKH;;;mCAEiBhB,I,EAAM;AACpB,gBAAMC,UAAUC,OAAOC,MAAP,CAAc,EAAC,gBAAgB,kBAAjB,EAAd,EAAoD,KAAKC,cAAL,EAApD,CAAhB;AACA,gBAAMC,UAAU,IAAIC,OAAJ,CAAYlB,UAAQY,KAAKO,EAAzB,EAA6B;AACzCC,wBAAQ,QADiC;AAEzCP,yBAASA;AAFgC,aAA7B,CAAhB;;AAKA,mBAAOU,MAAMN,OAAN,EAAeO,IAAf,CAAoB,oBAAY;AACnC,uBAAOC,SAASC,IAAT,EAAP;AACH,aAFM,EAEJC,KAFI,CAEE,iBAAS;AACd,uBAAOC,KAAP;AACH,aAJM,CAAP;AAKH;;;;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;kBAxGqB3B,Q","file":"TripsAPI.js","sourcesContent":["import request from 'superagent/lib/client';\nimport * as types from '../actions/actionTypes';\n\nconst API_URL = types.API_URL+'api/trips/';\n\nexport default class TripsAPI {\n\n    static requestHeaders() {\n        // return {'AUTHORIZATION': `Bearer ${sessionStorage.jwt}`}\n    }\n\n    static getAllTrips() {\n        // const headers = this.requestHeaders();\n        // console.log(API_URL);\n        // const request = new Request(API_URL, {\n        //     method: 'GET',\n        //     // headers: headers\n        // });\n\n        return new Promise((resolve, reject) => {\n            request\n                .get(API_URL)\n                .end((err, resp) => {\n                    if (err) reject(err);\n                    resolve(JSON.parse(resp.text));\n                })\n        });\n\n        // return fetch(request).then(response => {\n        //     return response.json();\n        // }).catch(error => {\n        //     return error;\n        // });\n    }\n\n    static updateTrip(trip) {\n        const headers = Object.assign({'Content-Type': 'application/json'}, this.requestHeaders());\n        const request = new Request(API_URL+trip.id, {\n            method: 'PUT',\n            headers: headers,\n            body: JSON.stringify({trip: trip})\n        });\n\n\n        return fetch(request).then(response => {\n            return response.json();\n        }).catch(error => {\n            return error;\n        });\n    }\n\n    static createTrip(trip) {\n        const headers = Object.assign({'Content-Type': 'application/json'}, this.requestHeaders());\n        const request = new Request(API_URL, {\n            method: 'POST',\n            headers: headers,\n            body: JSON.stringify({trip: trip})\n        });\n\n\n        return fetch(request).then(response => {\n            return response.json();\n        }).catch(error => {\n            return error;\n        });\n    }\n\n    static deleteTrip(trip) {\n        const headers = Object.assign({'Content-Type': 'application/json'}, this.requestHeaders());\n        const request = new Request(API_URL+trip.id, {\n            method: 'DELETE',\n            headers: headers\n        });\n\n        return fetch(request).then(response => {\n            return response.json();\n        }).catch(error => {\n            return error;\n        });\n    }\n}\n//\n// export default {\n//\n//   // We want to get a list of all the Trips\n//   // from the API. This list contains reduced info\n//   // and will be be used in the sidebar\n//   getTrips: (url) => {\n//     return new Promise((resolve, reject) => {\n//       request\n//         .get(url)\n//         .end((err, resp) => {\n//           if (err) reject(err);\n//           resolve(JSON.parse(resp.text));\n//         })\n//     });\n//   },\n//\n//   getTrip: (url) => {\n//     return new Promise((resolve, reject) => {\n//       request\n//         .get(url)\n//         // .set('Authorization', 'Bearer ' + AuthStore.getJwt())\n//         .end((err, resp) => {\n//           if (err) reject(err);\n//           resolve(JSON.parse(resp.text));\n//         })\n//     });\n//   }\n// }"]}